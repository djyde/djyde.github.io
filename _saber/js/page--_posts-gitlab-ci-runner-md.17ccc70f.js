(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{66:function(e,t,a){"use strict";a.r(t);var s=a(1),r=function(e){var t,a,s,r,n,o=(s=void 0,r="Coding",n="延伸阅读",(t={}).type=a="post",t.internal=s,t.contentType="markdown",t.slug="gitlab-ci-runner",t.content=s,t.createdAt=new Date(1492690662e3),t.updatedAt=new Date(1573230315232),t.title="搭建自己的 Gitlab CI Runner",t.layout=a,t.categories=[r],t.date="2017-04-20 20:17:42",t.tags=null,t.markdownHeadings=[{text:"Preface",slug:"preface",level:2},{text:"CI (Continuous Integration)",slug:"ci-continuous-integration",level:3},{text:"CI Runner",slug:"ci-runner",level:3},{text:"Gitlab Runner 环境",slug:"gitlab-runner-环境",level:2},{text:"安装 Docker",slug:"安装-docker",level:3},{text:"拉取 gitlab-runner 镜像",slug:"拉取-gitlab-runner-镜像",level:3},{text:"添加 gitlab-runner container",slug:"添加-gitlab-runner-container",level:3},{text:"配置用于 runner 的 docker image",slug:"配置用于-runner-的-docker-image",level:3},{text:"构建 Docker Image",slug:"构建-docker-image",level:3},{text:"注册 Runner",slug:"注册-runner",level:3},{text:"FAQ",slug:"faq",level:2},{text:"CI 运行时出现 ERROR: Job failed: API error (404): repository xxx not found: does not exist or no pull access",slug:"ci-运行时出现-error-job-failed-api-error-404-repository-xxx-not-found-does-not-exist-or-no-pull-access",level:3},{text:n,slug:n,level:2}],t.excerpt="<p>假定你已经有一台可用的，可联网的机器</p>\n",t.permalink="/blog/gitlab-ci-runner",t.assets={},t.attributes=t,t.categoriesInfo=[{name:r,permalink:"/categories/coding"}],t),l=e.options.beforeCreate||[];e.options.beforeCreate=[function(){this.$page=o}].concat(l);["layout","transition"].forEach((function(t){var a=e.options.PageComponent;a&&(e.options[t]=a[t]),void 0===e.options[t]&&(e.options[t]=o[t])})),o.slug&&(e.options.name="page-wrapper-"+o.slug.replace(/[^0-9a-z\-]/i,"-"))},n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("layout-manager",[a("blockquote",[a("p",[e._v("假定你已经有一台可用的，可联网的机器")])]),e._v(" "),a("h2",{attrs:{id:"preface"}},[e._v("Preface")]),e._v(" "),a("p",[e._v("这篇文章将介绍如何使用自己的机器来搭建用于 Gitlab CI 的 runner.  在搭建自己的 CI Runner 之前，需要先明确一些概念：")]),e._v(" "),a("h3",{attrs:{id:"ci-continuous-integration"}},[e._v("CI (Continuous Integration)")]),e._v(" "),a("p",[e._v("CI 的全称是 Continuous Integration (持续集成)，是 extreme programming (极限编程) 的一部分。我们常用 CI 来做一些自动化工作，这种自动化工作会运行在一台集中的机器上，比如程序的打包，单元测试，部署等。这种构建方式避免了了打包环境差异引动的错误，并且通过 Gitlab 的 hook, 在代码提交的各个环节自动地完成一系列的构建工作。")]),e._v(" "),a("h3",{attrs:{id:"ci-runner"}},[e._v("CI Runner")]),e._v(" "),a("p",[e._v("和第三方的 Travis CI, CircleCI 不同，"),a("strong",[e._v("Gitlab 本身并不提供机器")]),e._v("，只提供一个注册机器的接口。这些机器用于运行构建逻辑，在 Gitlab 中被称为 Runner.")]),e._v(" "),a("p",[a("img",{attrs:{src:"//gbstatic.djyde.com/assets/006tNc79gy1fet5ffxwglj31ac0y2wj8.jpg",alt:"runners"}})]),e._v(" "),a("h2",{attrs:{id:"gitlab-runner-环境"}},[e._v("Gitlab Runner 环境")]),e._v(" "),a("p",[e._v("在这里直接使用 Gitlab Runner 的官方 docker image:")]),e._v(" "),a("h3",{attrs:{id:"安装-docker"}},[e._v("安装 Docker")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -sSL https://get.daocloud.io/docker "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")])])])]),a("h3",{attrs:{id:"拉取-gitlab-runner-镜像"}},[e._v("拉取 gitlab-runner 镜像")]),e._v(" "),a("p",[e._v("因为众所周知的原因，国内 pull docker 镜像非常不稳定，所以在这里用 Daocloud 提供的镜像：")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -sSL https://get.daocloud.io/daotools/set_mirror.sh "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" -s http://718dbf2d.m.daocloud.io\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("service")]),e._v(" docker restart")])])]),a("p",[e._v("拉取镜像：")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker pull gitlab/gitlab-runner:latest")])])]),a("h3",{attrs:{id:"添加-gitlab-runner-container"}},[e._v("添加 gitlab-runner container")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker run -d --name gitlab-runner --restart always "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -v /srv/gitlab-runner/config:/etc/gitlab-runner "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  -v /var/run/docker.sock:/var/run/docker.sock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  gitlab/gitlab-runner:latest")])])]),a("h3",{attrs:{id:"配置用于-runner-的-docker-image"}},[e._v("配置用于 runner 的 docker image")]),e._v(" "),a("blockquote",[a("p",[e._v("虽然 Gitlab 支持多种 runner 运行方式，但本文建议使用 docker，因为使用 docker 较为灵活，一台机器可以创建多个 docker images 分别为不同的项目进行 CI, 但仍能保持环境隔离。")])]),e._v(" "),a("p",[e._v("配置 Docker image 最简单的方式是写 "),a("code",{pre:!0},[e._v("Dockerfile")]),e._v(", 比如可以用 Node.js 官方的 Docker image:")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"dockerfile"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-dockerfile"}},[a("code",{pre:!0,attrs:{class:"language-dockerfile"}},[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Dockerfile")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("7.9.0")])])]),a("p",[e._v("由于每个业务总会有各自的环境要求，比如应用依赖底层的库。这时可以通过 "),a("code",{pre:!0},[e._v("Dockerfile")]),e._v(" 配置：")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"dockerfile"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-dockerfile"}},[a("code",{pre:!0,attrs:{class:"language-dockerfile"}},[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Dockerfile")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("FROM")]),e._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("7.9.0\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("RUN")]),e._v(" apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get update && apt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("get install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("y \\\n\tpackage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("foo\n\tpackage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("-")]),e._v("bar")])])]),a("h3",{attrs:{id:"构建-docker-image"}},[e._v("构建 Docker Image")]),e._v(" "),a("p",[e._v("写好 "),a("code",{pre:!0},[e._v("Dockerfile")]),e._v(" 后，需要把它构建成 Image:")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Dockerfile")]),e._v("\n\ndocker build -t IMAGE_NAME "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")])])])]),a("p",[e._v("Build 完后，通过 "),a("code",{pre:!0},[e._v("sudo docker image ls")]),e._v(" 查看 image 状态。")]),e._v(" "),a("h3",{attrs:{id:"注册-runner"}},[e._v("注册 Runner")]),e._v(" "),a("p",[e._v("接下来就可以注册 Runner:")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it gitlab-runner gitlab-ci-multi-runner register")])])]),a("p",[e._v("程序会要求你填写相关的信息，这些信息可以从 Gitlab 项目的 "),a("code",{pre:!0},[e._v("Settings -> Runners")]),e._v(" 页面中找到：")]),e._v(" "),a("p",[a("img",{attrs:{src:"//gbstatic.djyde.com/assets/006tNc79gy1fetavn7r0lj319u0os78u.jpg",alt:"Gitlab runner info"}})]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[e._v("Please enter the gitlab-ci coordinator URL:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# http://gitlab.alibaba-inc.com/ci")]),e._v("\n\nPlease enter the gitlab-ci token "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" this runner:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 项目的 token")]),e._v("\n\nPlease enter the gitlab-ci description "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" this runner:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Runner 的 description")]),e._v("\n\nPlease enter the gitlab-ci tags "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" this runner "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("comma separated"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Runner 的 tag")]),e._v("\n\nWhether to run untagged builds "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("true/false"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# true")]),e._v("\n\nPlease enter the executor: docker, parallels, shell, kubernetes, docker-ssh, ssh, virtualbox, docker+machine, docker-ssh+machine:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker")]),e._v("\n\nPlease enter the default Docker image "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("e.g. ruby:2.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 填入构建 Docker image 时填写的 image 名称")])])])]),a("p",[e._v("这时 runner 就会出现在 "),a("code",{pre:!0},[e._v("runners")]),e._v(" 页面：")]),e._v(" "),a("p",[a("img",{attrs:{src:"//gbstatic.djyde.com/assets/006tNc79gy1fetbnh1e12j310008qdgs.jpg",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"faq"}},[e._v("FAQ")]),e._v(" "),a("h3",{attrs:{id:"ci-运行时出现-error-job-failed-api-error-404-repository-xxx-not-found-does-not-exist-or-no-pull-access"}},[e._v("CI 运行时出现 "),a("code",{pre:!0},[e._v("ERROR: Job failed: API error (404): repository xxx not found: does not exist or no pull access")])]),e._v(" "),a("p",[e._v("这是由于 Gitlab 会默认从远程拉取 image，而我们的 image 是在本地构建的，所以需要对 gitlab-runner 进行配置，把 "),a("code",{pre:!0},[e._v("pull_policy")]),e._v(" 设置为 "),a("code",{pre:!0},[e._v("if-not-present")]),e._v(" 或 "),a("code",{pre:!0},[e._v("never")]),e._v(".")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"bash"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-bash"}},[a("code",{pre:!0,attrs:{class:"language-bash"}},[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 进入 gitlab-runner 的 bash 环境")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" docker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" -it gitlab-runner "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 编辑 config.toml")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v(" /etc/gitlab-runner/config.toml")])])]),a("p",[e._v("编辑 "),a("code",{pre:!0},[e._v("config.toml")]),e._v(" 中对应的 runner:")]),e._v(" "),a("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"diff"}},[a("pre",{pre:!0,attrs:{class:"saber-highlight-code language-diff"}},[a("code",{pre:!0,attrs:{class:"language-diff"}},[e._v("[[runners]]\n"),a("span",{pre:!0,attrs:{class:"token unchanged"}},[e._v('  name = ""\n  url = ""\n  token = ""\n  executor = "docker"\n  [runners.docker]\n    tls_verify = false\n    image = "nb-node"\n    privileged = false\n    disable_cache = false\n    volumes = ["/cache"]\n')]),a("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[e._v('+   pull_policy = "if-not-present"\n')]),a("span",{pre:!0,attrs:{class:"token unchanged"}},[e._v("  [runners.cache]\n")])])])]),a("h2",{attrs:{id:"延伸阅读"}},[e._v("延伸阅读")]),e._v(" "),a("ul",[a("li",[a("saber-link",{attrs:{to:"https://docs.gitlab.com/runner/install/docker.html"}},[e._v("Run GitLab Runner in a container")])],1),e._v(" "),a("li",[a("saber-link",{attrs:{to:"https://www.daocloud.io/mirror#accelerator-doc"}},[e._v("配置 Docker 加速器")])],1),e._v(" "),a("li",[a("saber-link",{attrs:{to:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/"}},[e._v("Best practices for writing Dockerfiles")])],1),e._v(" "),a("li",[a("saber-link",{attrs:{to:"https://docs.gitlab.com/runner/executors/docker.html#using-the-if-not-present-pull-policy"}},[e._v("Using the if-not-present pull policy")])],1)])])}),[],!1,null,null,null);"function"==typeof r&&r(n);t.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{84:function(t,a,s){"use strict";s.r(a);var e=s(0),n=function(t){var a,s,e,n,r,p,o=(e=void 0,n="Coding",r="frontend",p="react",(a={}).type=s="post",a.internal=e,a.contentType="markdown",a.slug="react-and-the-way-building-web-ui",a.content=e,a.createdAt=new Date(1483208376e3),a.updatedAt=new Date(1570587978357),a.title="从 React 谈 Web UI 开发",a.date="2017-01-01 02:19:36",a.layout=s,a.categories=[n],a.tags=[r,p],a.pin=!0,a.markdownHeadings=[],a.excerpt="<p>此前我在 Twitter 上这样表达过对 React 的理解，但是 Twitter 篇幅有限，所以在这篇文章里，我要做更详尽的阐述。</p>\n",a.permalink="/blog/react-and-the-way-building-web-ui",a.assets={},a.attributes=a,a.tagsInfo=[{name:r,permalink:"/tags/frontend"},{name:p,permalink:"/tags/react"}],a.categoriesInfo=[{name:n,permalink:"/categories/coding"}],a),c=t.options.beforeCreate||[];t.options.beforeCreate=[function(){this.$page=o}].concat(c);["layout","transition"].forEach((function(a){var s=t.options.PageComponent;s&&(t.options[a]=s[a]),void 0===t.options[a]&&(t.options[a]=o[a])})),o.slug&&(t.options.name="page-wrapper-"+o.slug.replace(/[^0-9a-z\-]/i,"-"))},r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("layout-manager",[s("blockquote",{staticClass:"twitter-tweet",attrs:{"data-lang":"en"}},[s("p",{attrs:{lang:"en",dir:"ltr"}},[t._v("If using React makes u confused, it's time to think about what React actually is. It's a great DOM diff algorithm with component system.")]),t._v("— Randy (@randyloop) "),s("saber-link",{attrs:{to:"https://twitter.com/randyloop/status/814663047541231616"}},[t._v("December 30, 2016")])],1),t._v(" "),s("script",{tag:"component",attrs:{async:"",src:"//platform.twitter.com/widgets.js",charset:"utf-8"}}),t._v(" "),s("p",[t._v("此前我在 Twitter 上这样表达过对 React 的理解，但是 Twitter 篇幅有限，所以在这篇文章里，我要做更详尽的阐述。")]),t._v(" "),s("p",[t._v("我从前不喜欢 React, 是因为写 React 的 render function 不像写 template 一样方便，尤其是存在复杂的判断渲染的时候，Vue 的 template 一个 v-if 就搞定了。而在 React 里写，需要把这个判断写成 function, 然后条件判断 return 哪一个 view. 这是我最初对 React 的偏见所在之一。")]),t._v(" "),s("p",[t._v("然而经过自己的实践和思考，加上阅读一些文章，我发现以前的想法是错的。我在使用 React 的时候，没有做到 Thinking in React. 从而对 React 产生了不解和困惑。")]),t._v(" "),s("p",[t._v("有很多人把 React 当成框架来用，这是用不好 React 的根本原因。很少人认真思考 "),s("strong",[t._v("A JavaScript library for building User Interface")]),t._v(" 背后的含义，把 React 用得一团糟。")]),t._v(" "),s("p",[t._v("何谓 For Building User Interface? 意思就是，这个库仅仅是用于构建 UI 的，这是 React 本质要解决的问题。我甚至和很多人说，事实上 React 本身是不是 React 已经不重要了，重要的是我们写 UI 的思维。"),s("strong",[t._v("React 这个 library 本身仅仅是用来实现这个思维的手段")]),t._v("。React 提供的，是优秀的 DOM diff 算法，和一套 Component system。换成代码来说，也就是：")]),t._v(" "),s("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[s("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[s("code",{pre:!0,attrs:{class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" View")])])]),s("p",[t._v("这是 React building UI 的核心思想，所有的组件，就是接受 state, 返回一个 View. 这样看上去比较抽象，比如我们有一个 Clock 组件：")]),t._v(" "),s("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[s("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[s("code",{pre:!0,attrs:{class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Clock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n<div id='clock'>\n\t<span>It's now: </span>\n\t<span>")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("</span>\n</div>\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])])])])]),s("p",[t._v("Clock 是一个 function, 接受一个 time 参数，返回的是一串 HTML String. 在程序里，我们可以给一个 Interval, 每秒传一个当前的 time, 得到一个新的 HTML String, 然后 apply 到某个 DOM 上。")]),t._v(" "),s("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[s("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[s("code",{pre:!0,attrs:{class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" $app "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  $app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTMl "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Clock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])])]),s("p",[t._v("这样的实现是能达到目的的，但是问题在于，每次 "),s("code",{pre:!0},[t._v("innerHTML")]),t._v(" 时，整个 "),s("code",{pre:!0},[t._v("#app")]),t._v(" 的 DOM 树会被重新渲染。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gbstatic.djyde.com/blog/plain-render-clock.gif",alt:""}})]),t._v(" "),s("p",[t._v("我们都知道，DOM 更新的花费是昂贵的。整个 DOM 树，实际上只是一个 "),s("code",{pre:!0},[t._v("span")]),t._v(" 在不断变化，所以我们需要 DOM diff 算法来得知到底哪一个 DOM 节点才需要被更新，从而节省开销：")]),t._v(" "),s("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[s("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[s("code",{pre:!0,attrs:{class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Clock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'clock'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("It's now"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" $app "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Clock time"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])])]),s("p",[t._v("在 React 里，把 props 传入，返回一个类似 HTML 的结构，然后 render 到指定的 DOM 节点上。这里 React 会算出哪个节点应该被更新：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gbstatic.djyde.com/blog/react-render-clock.gif",alt:""}})]),t._v(" "),s("p",[t._v("我们这样手动去 setInterval 然后 render 未免有点傻，我们可以更改 state (也就是通常用到的 "),s("code",{pre:!0},[t._v("setState")]),t._v(") 自动地让 React 随着 state 的改变而重新 render. 这里的 time 就是一个 state. 这叫做 Reactive.")]),t._v(" "),s("p",[t._v("Functional Programming 里有 Pure Function 的概念。Pure Function 之所以 Pure, 是因为不存在 side effect. 举个例子，我们写一个求和 function：")]),t._v(" "),s("div",{pre:!0,attrs:{class:"saber-highlight","data-lang":"javascript"}},[s("pre",{pre:!0,attrs:{class:"saber-highlight-code language-javascript"}},[s("code",{pre:!0,attrs:{class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])])])]),s("p",[t._v("这个求和函数就是一个 pure function. 因为函数内部没有对 input 做任何改变，并且返回一个新的值。我传 1 和 1，得到的永远是 2.")]),t._v(" "),s("p",[t._v("Pure Function 的好处是利于维护和测试。要测试一个 Pure Function, 仅仅是传不同的值，预言对应的返回值。")]),t._v(" "),s("p",[t._v("现在回头看 React 的 Component, 也可以算是一个 Pure Function——接收不同的 props, 然后 render 对应的 View. 上面 Clock 的例子，props 和返回的 View 是映射关系。")]),t._v(" "),s("p",[t._v("光是 "),s("code",{pre:!0},[t._v("state => View")]),t._v(" 还不够，在构建 UI 的时候，我们希望 state 改变的时候，立即 rerender 整个 View, 也就是我们经常用到的 "),s("code",{pre:!0},[t._v("setState()")]),t._v(".")]),t._v(" "),s("p",[t._v("这样就很容易理解为什么我说 React 仅仅是实现构建 UI 思想的手段，因为构建 UI 的思想总结起来就是：")]),t._v(" "),s("ol",[s("li",[t._v("State 是 Reactive 的 (比如 React 的 "),s("code",{pre:!0},[t._v("setState")]),t._v(")")]),t._v(" "),s("li",[t._v("state => View (依靠 DOM diff)")]),t._v(" "),s("li",[t._v("View 组成 Component")]),t._v(" "),s("li",[t._v("管理 state （依靠第三方的 state manager）")])]),t._v(" "),s("p",[t._v("无论是 React 还是 Vue, 大抵都是这样的思想。Vue 1 还不完全是，Vue 2 就更接近了，只是后者写法既可以写得像 template, 又可以写直接写 vdom.")]),t._v(" "),s("p",[t._v("而开发者常常感到困难的地方实际上是上面的第 4 点——管理 state. "),s("strong",[t._v("写 React 写得痛苦，大部分原因是用把 library 当成 framework 去用")]),t._v("，把处理 state 的逻辑瞎写到 View 层中去，也就是所谓的 Dump Component.")]),t._v(" "),s("p",[t._v("改变 state 是 side effect, 我们应该把它从 View 层中分离出去。我多次提到，"),s("strong",[t._v("View 层真正要做的，仅仅是根据 state 返回对应的 View")]),t._v(". state 的变化逻辑，应该在给 state manager 库去做，例如 Redux, Mobx. 下面我用 Mobx 作为例子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gbstatic.djyde.com/blog/mobx-ticker.gif",alt:""}})]),t._v(" "),s("p",[s("em",[s("saber-link",{attrs:{to:"https://jsbin.com/fumerup/edit?js,output"}},[t._v("https://jsbin.com/fumerup/edit?js,output")])],1)]),t._v(" "),s("p",[t._v("如果没有接触过 Mobx 不用慌张，只需要知道，Mobx 的 Observable 变化时，被 observer 包装的 React 组件会重新渲染。使用 state manager, 明显地分离了 View 和 side-effect:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gbstatic.djyde.com/blog/state-effect-view.png",alt:""}})]),t._v(" "),s("p",[t._v("测试这样的程序，首先为 side effect 的逻辑做测试，再为 View 做测试。View 的测试在这里就十分简单了，给他传一个 store 实例，借助 "),s("saber-link",{attrs:{to:"https://github.com/airbnb/enzyme"}},[t._v("enzyme")]),t._v(" 之类的 testing utilities 预言不同的 action 得到的返回 View.")],1),t._v(" "),s("p",[t._v("React 是 Reactive Programming 在 Web User Interface 上实现的手段，它只不过是一个库，提供了reactive render, component system 和降低开销的 DOM diff 算法. 把 React 换掉，只要不是手动操作 DOM, 其它的框架也不过大同小异。重要的是理解它背后的思想。说到底，前端开发在解决什么问题，用什么样的方式解决问题，在使用任何框架和库之前先把这两个问题思考明白，就不会认为前端难学了。")])],1)}),[],!1,null,null,null);"function"==typeof n&&n(r);a.default=r.exports}}]);
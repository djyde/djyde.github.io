(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{111:function(t,e,a){"use strict";a.r(e);var n=a(1),i=function(t){var e,a,n,i,o,s,p,r=(e=void 0,a="typescript",n={},i={},o=new Date(1573272697078),s="post",p="类型检查是一种负担吗？",n.type=s,n.internal=e,n.contentType="markdown",n.slug="is-static-type-in-javascript-a-burden",n.content=e,n.createdAt=new Date(14751072e5),n.updatedAt=new Date(1573230315233),n.title="静态类型在 JavaScript 中是一种负担吗？",n.layout=s,n.date="2016-09-29",n.categories=["Coding"],n.tags=[a,"javascript","tech"],n.pin=!0,n.markdownHeadings=[{text:p,slug:p,level:3},{text:"静态类型的 JavaScript",slug:"静态类型的-javascript",level:3}],n.excerpt='<p>最近我在公司的项目中遇到很多由于类型不匹配所导致的不可预估的问题。比如说，我们的程序产生了一个纯数字的 unique id, 存到数据库中被识别为 <code v-pre="">number</code> 类型，但是客户端需要的是字符串，导致一条数据在没有办法在客户端正常显示。</p>\n',n.permalink="/blog/is-static-type-in-javascript-a-burden",n.assets={},n.attributes=n,i.type="page",i.internal=e,i.contentType="default",i.isTagPage=!0,i.layout="tag",i.permalink="/tags/typescript",i.slug=a,i.createdAt=o,i.updatedAt=o,i.posts=[n],i.pagination={hasPrev:!1,hasNext:!1,total:1,current:1,prevLink:"/tags/typescript/page/2",nextLink:e},i.tag=a,i.assets={},i.attributes=i,i.content=e,i),c=t.options.beforeCreate||[];t.options.beforeCreate=[function(){this.$page=r}].concat(c);["layout","transition"].forEach((function(e){var a=t.options.PageComponent;a&&(t.options[e]=a[e]),void 0===t.options[e]&&(t.options[e]=r[e])})),r.slug&&(t.options.name="page-wrapper-"+r.slug.replace(/[^0-9a-z\-]/i,"-"))},o=Object(n.a)({},(function(){var t=this.$createElement;return(this._self._c||t)("layout-manager")}),[],!1,null,null,null);"function"==typeof i&&i(o);e.default=o.exports}}]);
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Randy&#39;s Blog</title>
  
  
  <link href="/rss.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-22T03:14:26.047Z</updated>
  <id>/</id>
  
  <author>
    <name>Randy Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我开通了知识星球</title>
    <link href="/blog/my-zsxq/"/>
    <id>/blog/my-zsxq/</id>
    <published>2019-07-22T03:08:55.000Z</published>
    <updated>2019-07-22T03:14:26.047Z</updated>
    
    <content type="html"><![CDATA[<p>我不太喜欢程序员圈子的社交，写博客多年，收到了不少对我博客和文章的打赏，和一些有心的网友发长邮件对我提问，但一直没有与我的博客读者们建立起一种有效关系。我想，何不让支持我博客的读者在打赏的同时，作为回报，可以在知识星球向我提问，或获得我认为有价值的分享呢。</p><p>我在我所在的领域远算不上专家，只是一路走来有很多经验和自己独特的理解可以分享出去。以我这微不足道的「影响力」，我也不会因此获得多少钱。<strong>我希望读者可以把我创建的这个知识星球当作打赏的一个副加回报去看待。</strong></p><p>我会在知识星球分享：</p><ul><li>回答成员的问题（包括编程、音乐和健身）</li><li>分享自己看到有价值的项目或文章</li><li>偶尔一些主观的短评</li></ul><p><img src="https://gbstatic.djyde.com/image_554541844184_3.JPG?x-oss-process=style/80" width="30%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我不太喜欢程序员圈子的社交，写博客多年，收到了不少对我博客和文章的打赏，和一些有心的网友发长邮件对我提问，但一直没有与我的博客读者们建立起一种有效关系。我想，何不让支持我博客的读者在打赏的同时，作为回报，可以在知识星球向我提问，或获得我认为有价值的分享呢。&lt;/p&gt;
&lt;p&gt;我
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>未来属于声明式编程</title>
    <link href="/blog/declarative-programming-is-the-future/"/>
    <id>/blog/declarative-programming-is-the-future/</id>
    <published>2019-07-18T12:11:30.000Z</published>
    <updated>2019-07-18T12:14:32.384Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/zh-cn/%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%B7%A8%E7%A8%8B?oldformat=true" target="_blank" rel="noopener">声明式编程</a> （Declarative Programming）是一种编程范式。现实世界中，我们大部分编码都是命令式的。</p><p>举个最常见的例子，对于用 JavaScript 来构建 UI, React 是声明式的。</p><pre><code class="js">// 普通的 DOM API 构建 UIconst div = document.createElement(&#39;div&#39;)const p = document.createElement(&#39;p&#39;)p.textContent = &#39;hello world&#39;const UI = div.append(p)</code></pre><pre><code class="js">// React 构建 UIconst h = React.craeteElementconst UI = h(&#39;div&#39;, null, h(&#39;p&#39;, null, &#39;hello world&#39;))</code></pre><p>所有的 DSL (HTML, XML, SQL) 都是声明式的，你写出一条 SQL 语句，只是为了告诉数据库你要什么，然后数据库就会给你对应的数据，而不是通过数据库的 API 去取。</p><pre><code class="sql">SELECT * FROM Products WHERE name=&#39;Alipay&#39;</code></pre><p>Apple 在今年 (2019 年) 也推出了 Swift UI, 在 WWDC 的 Swift UI 相关的 Session 里也<a href="https://developer.apple.com/videos/play/wwdc2019/216/" target="_blank" rel="noopener">多次提到声明式 UI 开发的威力</a>。</p><p>声明式编程的潜力在于：</p><p><strong>解放人力成本，你只要「声明」你要做什么，具体怎么做，由运行时解决。</strong></p><p>函数式编程就是声明式编程的一种，在函数式编程里的<a href="https://zh.wikipedia.org/zh-hans/%E5%B0%BE%E8%B0%83%E7%94%A8?oldformat=true" target="_blank" rel="noopener">尾递归</a>性能，就取决于运行时，而不是靠程序员去手动优化。React 里你只要描述你的 UI, 接下来状态变化后 UI 如何更新，是 React 在运行时帮你处理的，而不是靠程序员优化 diff 算法。</p><p>我们可以认为 Serverless (尤其是函数计算) 在运维领域获得了声明式的好处 —— 我们定义好了函数，我们只要告诉平台我们需要调用这个函数，那么如何进行计算资源分配、如何对代码做分布式部署，都不需要程序员考虑。</p><p>运行时帮你完成工作，除了可以节省人力成本外，还降低了程序员出错的概率 —— 因为写的代码越少，出错的概率就越小。人是最不可靠的，我们应该尽量把工作交给计算机。</p><p><strong>「声明」是「描述」而不是真正「执行」</strong></p><p>在纯函数式编程语言里面，一切都是声明式的，是纯 (Pure) 的，没有副作用（Side Effect）的。</p><p>Haskell 是一个纯函数式的语言，像在控制台输出文本这种方法（<code>putStrLn</code>）就是一种副作用。在 Haskell 里 <code>putStrLn &quot;Hello World&quot;</code> 本身不会真正地输出 “Hello World“, 而是返回一个 IO 类型，来说明他是一个副作用。但它如何被执行，取决于运行时。</p><p><a href="https://elm-lang.org" target="_blank" rel="noopener">Elm</a> 和 Haskell 一样，副作用也只是返回一种类似 Haskell 中的 IO 类型。在 Elm 中叫做 Cmd. </p><p><img src="https://gbstatic.djyde.com/F5AF0D75-30A2-46DD-B66F-9FDEFFC10B27.png?x-oss-process=style/80" alt></p><p>以上说的这些，可能太过抽象。所以我用前端的同学们应该都知道的 redux-saga 对此作更具象的解释。也可以解答为什么我虽然不喜欢 Redux, 但认为 redux-saga 是一个的很不错的库。因为他利用 redux 的 middleware 机制和 generator 巧妙地实现了类似 Haskell 的 IO. </p><p>下面我将用 <a href="https://redux-saga.js.org/docs/basics/DeclarativeEffects.html" target="_blank" rel="noopener">官方文档的例子</a> 做解释。</p><p>比如，以下是一个有副作用的函数:</p><pre><code class="js">import { call } from &#39;redux-saga/effects&#39;function* fetchProducts() {  const products = yield call(Api.fetch, &#39;/products&#39;)  // ...}</code></pre><p>显然，<code>Api.fetch()</code> 是副作用，它会发送网络请求。但是，在 redux-saga 里面，你不应该直接执行这个函数，而是使用 <code>call</code> 告诉 redux-saga —— 你要执行 <code>Api.fetch</code> , 参数为 <code>/products</code>. </p><p>所以，事实上这个函数没有被命令式地被执行，而是由 redux-saga 决定如何执行。</p><p>如果你在外部直接调用 <code>fetchProducts()</code>, 你会得到一个 Generator Iterator. 然后通过 <code>next()</code> 得到你 yield 的值。所以你可以这样去测试你的程序：</p><pre><code class="js">const iterator = fetchProducts()// expects a call instructionassert.deepEqual(  iterator.next().value,  call(Api.fetch, &#39;/products&#39;),  &quot;fetchProducts should yield an Effect call(Api.fetch, &#39;./products&#39;)&quot;)</code></pre><p>也就是说，你要测试的是「你有没有告诉程序你要执行的副作用，以及执行的参数是什么」。和命令式编程不同，因为命令式的程序在你执行函数时会真实地执行这个 <code>Api.fetch</code>，你必须用测试框架里类似 <code>mockFn</code> 的手段去 mock 这个函数进行测试。</p><p><code>fetchProducts()</code> 只有在 Redux 环境里，才会真正地执行副作用（在这里就是 Api.fetch 发送的网络请求）。</p><p>所以，<strong>声明式的编程是非常易于测试的</strong>。</p><p><strong>可视化编程是一种声明式编程</strong></p><p>我们探索可视化编程，是因为我们一直期望通过拖拽就能完成开发，其实就是期望我们完成任务仅仅需要通过声明，而不是写命令式的代码。当然这是一种理想的状态。</p><p>DSL 是最常见的声明式编程形式。我一直在布道 GraphQL, 因为它把网络请求变得声明式了：</p><pre><code class="gql">query {    posts {        id, title, content  }}</code></pre><p>把网络请求变成声明式的好处有很多，其中一个就是它可以被放到各种各样的环境被执行。想象一下，我们可以打造一个可视化的应用搭建工具，在命令式编程的场景下，我们如果要做出如「点击按钮发送请求，得到响应后触发另一个 UI 更新」，就需要编写命令式的代码：</p><pre><code class="js">async function onClickButton() {    // 手动发送请求    const result = await fetch(&#39;/api&#39;)    // 手动更新 UI  table.dataSource = result}</code></pre><p>如果是 GraphQL, 我们可以把每一条 GraphQL 语句单独看作一个对象，他可以被任何组件触发，它的结果也可以被任何组件订阅。这样一来，在可视化的搭建工具里，程序员要做的是：</p><ol><li>（声明式地）编写 GraphQL 查询语句 </li><li>（声明式地）为组件（比如某个按钮）绑定 onClick 事件为触发某条查询语句</li><li>（声明式地）为组件（比如某个表格）绑定某条查询语句的响应值对应哪些组件的属性值</li></ol><p>当然现实世界的应用不是那么简单，但已经是跨出了很大一步。</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>未来为什么属于声明式编程，因为我们在不断地努力提高开发效率，声明式编程显然是提效的最佳手段。React, Flutter, SwiftUI, GraphQL 的出现是最好的证明。最近听到内网太多人在提 Serverless, 我想说，<strong>提升开发效率，我们应该去想如何尽量让开发者声明式地编写代码，而不是只去想我们在 Serverless 上能做什么。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%B7%A8%E7%A8%8B?oldformat=true&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;声明式编
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>井底之蛙的一片天空</title>
    <link href="/blog/to-hongkong-people/"/>
    <id>/blog/to-hongkong-people/</id>
    <published>2019-06-17T11:01:55.000Z</published>
    <updated>2019-06-17T11:53:32.371Z</updated>
    
    <content type="html"><![CDATA[<p>有次和朋友提到移民的想法，他说，为什么不考虑日本呢？我的回答是，我对日本没有特别的情感。朋友说他正相反。然后他问道：难道你的童年没有看日本动画吗？</p><p>我的童年除了阅读，大部分信息的获取来源于电视机。我从电视机看过的日本动画不少 —— 在 CCTV 少儿频道看《四驱兄弟》，在 TVS (南方卫视) 看《哆啦 A 梦》，在华娱卫视《通灵王》、《军曹》，在本港台看《游戏王》，在翡翠台又看了不计其数的，就不一一列举。</p><p>我从这些动画片里感受不出日本文化，一是因为都是中文的配音，二是基本上我看的都是虚构类作品，无法从中了解到日本的文化生活。只有翡翠台偶尔播出一些配音的日本真人电视节目，让我了解到日本的街道和风景是如此模样，但仅此而已。</p><p>不过我却很能理解我的那位朋友，因为我对另一片土地 —— 香港 —— 有一样的感受。</p><p>电视机把我和香港的距离拉得很近。白天有「卡通片」，傍晚有儿童节目，每晚六点半，可以看《六点半新闻报道》，知道香港、国际在发生的事。7点半后，有《东张西望》看娱乐新闻。紧接下来就是八点档和九点档的电视剧。</p><p>我是看香港电视剧和电影、听「广东歌」长大的。聊起亚视的「柒事」，我们一样会大笑。现在不看电视，但还有 YouTube. 走在香港街头，我一个广东人，和香港人又有什么太大的区别呢。</p><p>最大的区别可能是，我很羡慕香港人。香港人可以有不同的政见，可以自由表达自己的观点，有权发声争取自己（或别人）应有的权利，可以大声对别人讲：「香港系有言论自由咖」！不用担心「讲错嘢」。而我不能。</p><p>香港不能失去这些。我愿意在这样的地方生活。香港是我的精神家园。</p><p>撇开身份认同，在政治上，香港回归早已经是国际社会公认的。我自己作为中国人，一直为中国有这样的香港感到庆幸。<strong>因为这代表中国人还能有另一种作为中国人的方式。</strong></p><p>而我，很惭愧，虽同讲广东话，但在内地，也只不过是一只知道自己是井底之蛙的井底之蛙罢了。</p><p>王小波说「井底之蛙也拥有一片天空」，对我来说，这片天空就是香港。</p><p>衷心祝福香港。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有次和朋友提到移民的想法，他说，为什么不考虑日本呢？我的回答是，我对日本没有特别的情感。朋友说他正相反。然后他问道：难道你的童年没有看日本动画吗？&lt;/p&gt;
&lt;p&gt;我的童年除了阅读，大部分信息的获取来源于电视机。我从电视机看过的日本动画不少 —— 在 CCTV 少儿频道看《四
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我想得到它，因为它是好的</title>
    <link href="/blog/want-it-cuz-it-is-right/"/>
    <id>/blog/want-it-cuz-it-is-right/</id>
    <published>2019-06-13T11:06:31.000Z</published>
    <updated>2019-06-17T11:53:22.666Z</updated>
    
    <content type="html"><![CDATA[<p>王小波在《跳出手掌心》里有这么一段话，初读时使我似醍醐灌顶：</p><blockquote><p>我上大學時，有一次我的數學教授在課堂上講到：我現在所教的數學，你們也許一生都用不到，但我還要教，因為這些知識是好的，應該讓你們知道。這位老師的胸襟之高遠，使我終生佩服。我還要說，像這樣的胸襟，在中國人文知識分子中間很少見到。</p></blockquote><p>把「知识」换成「<a href="https://zh.wikipedia.org/zh/%E6%99%AE%E4%B8%96%E5%83%B9%E5%80%BC" target="_blank" rel="noopener">普世价值</a>」，我认为道理同样成立：</p><p>我们追求普世价值，是因为普世价值是好的，是对的，只要你是人类，你就应该拥有他。如果有人不幸失去，那么就应该帮助他。</p><p>令人难过的是，由于一系列客观条件，一部分人无法对此感同身受。普世价值和民族无关，和国籍无关，它属于全人类。一旦能意识到一点，那么这些人就很容易能识破一些延用了近半个世纪的可笑的借口和谎言，他们的被害妄想症也理应会被治愈。</p><p>很遗憾，我得不到它，我本应该能为此不断地写，不断地写，但我不能。这让我难过了很多年，一直到现在。</p><p>愿不在意的人能一直不在意，以免遭受这种难过。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;王小波在《跳出手掌心》里有这么一段话，初读时使我似醍醐灌顶：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我上大學時，有一次我的數學教授在課堂上講到：我現在所教的數學，你們也許一生都用不到，但我還要教，因為這些知識是好的，應該讓你們知道。這位老師的胸襟之高遠，使我終生佩服。我還
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>为你写的一首诗</title>
    <link href="/blog/a-poem-for-you/"/>
    <id>/blog/a-poem-for-you/</id>
    <published>2019-06-12T13:03:25.000Z</published>
    <updated>2019-06-13T13:15:40.583Z</updated>
    
    <content type="html"><![CDATA[<p>我喜欢你<br>从那年的某天<br>我突然遇到你<br>但他们说<br>不要谈论你<br>因为她不喜欢你</p><p>所以你是禁忌 你是克星<br>你只会带来麻烦<br>他们请我不要谈论你</p><p>我说你没有错 喜欢你也没有错</p><p>错在她不喜欢你</p><p>他们劝我私奔吧<br>去一个大家都喜欢你的地方</p><p>但她是我妈妈<br>我如何离开她</p><p>他们劝我离开你吧<br>即使没有你 生活如常</p><p>多年后<br>我偶尔提起你<br>他们请我不要谈论你</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我喜欢你&lt;br&gt;从那年的某天&lt;br&gt;我突然遇到你&lt;br&gt;但他们说&lt;br&gt;不要谈论你&lt;br&gt;因为她不喜欢你&lt;/p&gt;
&lt;p&gt;所以你是禁忌 你是克星&lt;br&gt;你只会带来麻烦&lt;br&gt;他们请我不要谈论你&lt;/p&gt;
&lt;p&gt;我说你没有错 喜欢你也没有错&lt;/p&gt;
&lt;p&gt;错在她不喜欢你&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客近期的变化</title>
    <link href="/blog/nearly-blog-change/"/>
    <id>/blog/nearly-blog-change/</id>
    <published>2019-06-11T15:16:29.000Z</published>
    <updated>2019-06-13T13:15:40.585Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片-CDN-迁移到了阿里云"><a href="#图片-CDN-迁移到了阿里云" class="headerlink" title="图片 CDN 迁移到了阿里云"></a>图片 CDN 迁移到了阿里云</h3><p>从上个月开始，博客的图片全部无法显示，原因是新浪微博开始防盗链了。</p><p>起初选择使用新浪微博的图床，一方面是因为不用花钱，另一方面是因为觉得自己的博客没有多少访问量，也就不折腾 CDN 了。然而这一两年我意识到，我认真写下的文字也被不少人在认真看待。趁着这个契机，就把博客的图片全部迁移到稳定的 CDN 上。</p><p>我选择了<a href="/link/aliyun">阿里云 OSS + CDN 的方案</a>，我用 grep 把博客里所有的新浪图床图片找了出来，然后批量下载下来，上传到 OSS 上。</p><p>比较麻烦的是国内的 CDN 域名需要备案，除此之外，就是阿里云的一条龙服务 —— 域名可以绑定到 CDN，CDN 可以直接关联 OSS。体验还算不错。</p><h3 id="全站-Cloudflare"><a href="#全站-Cloudflare" class="headerlink" title="全站 Cloudflare"></a>全站 Cloudflare</h3><p>Coding Page 的 Pages 服务在香港的腾讯云，抽风是家常便饭，无法忍受。于是接入了 Cloudflare, 现在你访问的这里就是经过 Cloudflare 加速的页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;图片-CDN-迁移到了阿里云&quot;&gt;&lt;a href=&quot;#图片-CDN-迁移到了阿里云&quot; class=&quot;headerlink&quot; title=&quot;图片 CDN 迁移到了阿里云&quot;&gt;&lt;/a&gt;图片 CDN 迁移到了阿里云&lt;/h3&gt;&lt;p&gt;从上个月开始，博客的图片全部无法显示，原因是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11 寸 iPad Pro 体验</title>
    <link href="/blog/ipad-pro-11-review/"/>
    <id>/blog/ipad-pro-11-review/</id>
    <published>2019-04-06T05:28:13.000Z</published>
    <updated>2019-05-15T08:20:13.891Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://bstatic.djyde.com/DSC02308.JPG?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>这次入手 iPad Pro 完全是个意外，原本的计划是入手新款 iPad mini 更新一下我用了三年的 iPad mini 2. 后来想一想，不如用 24 期免息直接入手 iPad Pro. </p><p>之所以想换代，主要是这些原因：</p><ul><li>没有 Touch ID. 尤其是用 1Password 的时候，每次都得重新输入主密码。</li><li>卡顿明显。</li></ul><p>恰逢这周末在深圳出差，我故意不带我的 15 寸 Macbook Pro, 只带了 iPad Pro. 然后又深度体验了一周。</p><h2 id="用-Kindle-App-阅读"><a href="#用-Kindle-App-阅读" class="headerlink" title="用 Kindle App 阅读"></a>用 Kindle App 阅读</h2><p>虽然我也有一台 Kindle Paperwhite, 但是我更倾向于用 iPad 阅读。因为我的眼睛对屏幕不挑剔，使用 iPad 阅读不会像别人说的眼睛不舒服。而 iPad 能提供比 Kindle 大的阅读面积。</p><p>iPad mini 2 相对于 Kindle Paperwhite 来说已经大了不少，而在 iPad Pro 11 寸阅读给我的感受是读书就像是在读报纸。这次出差在飞机上总共读完了两本书，体验完胜 Kindle. </p><p><img src="//bstatic.djyde.com/FullSizeRender.jpg?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>即使尺寸大，但握在手上也不会觉得笨重。</p><p><img src="//bstatic.djyde.com/IMG_0025.JPG?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><h2 id="浏览网页、社交网络"><a href="#浏览网页、社交网络" class="headerlink" title="浏览网页、社交网络"></a>浏览网页、社交网络</h2><p>并不是说 iPad mini 2 不能做到，而是 mini 2 的性能让我没有欲望这样做。但是我很愿意在 iPad Pro 上 Google 一翻，刷刷 Twitter / 微博，收发 Email. 一切都很顺畅。</p><p><img src="//bstatic.djyde.com/Snapseed%203.jpg?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>周末出差时，我的周报都是在 iPad Pro 上完成的。我用讯飞语音完成周报的文字录入，准确率比想象中高得多。讯飞可以满足大部分的文字录入需求，当然，有些场景不方便使用语音输入。这时有个键盘是更好的选择。迫于贫穷，我没有买 Smart Keyboard, 而是买了只要 178 元的罗技 k380.</p><p><img src="//bstatic.djyde.com/9C93C41D5DB7-1.jpeg?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>K380 很适合对便携性有要求的用户，重量轻，支持 3 个设备一键切换。手感就是普通薄膜键盘的手感。唯一的缺点是和 iPad Pro 搭配使用的话，你要额外买一个支架架住 iPad.</p><h2 id="处理照片"><a href="#处理照片" class="headerlink" title="处理照片"></a>处理照片</h2><p>这次到深圳出差顺便逛了一下海边，用 SONY RX100 拍了不少照片。当晚到顺电买了一个 MOMAX 的 Type-C HUB. 插到 iPad Pro 上，会自动打开系统照片 App 的导入页面，可以直接把 SD 卡里的照片导出。然后用 Snapseed 就能处理图片。</p><p><img src="//bstatic.djyde.com/42FE525EA268-1.jpeg?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>在没有 Macbook Pro 的情况下可以完成整个从照片导出到照片后期的过程，倒是令我惊喜的。</p><p>这是一张用 iPad Pro 后期的照片。</p><p><img src="//bstatic.djyde.com/413142799.jpg?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>因为家里有 NAS, 64GB 倒不会不够用，照片导出和处理完，直接扔到 NAS 就完事了。</p><h2 id="写字"><a href="#写字" class="headerlink" title="写字"></a>写字</h2><p>我本身就很喜欢写字，手写歌词，于是我也入了 Apple Pencil 2 以及笔记 App 「Goodnotes 5」. </p><p>刚开始在屏幕上写字有点不习惯它的手感 —— 太硬了。但是适应了一段时间后慢慢找到了点感觉。</p><p>这是在纸上写的字：</p><p><img src="//bstatic.djyde.com/DSC01772.JPG?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><p>这是在 iPad 上写的同样的字：</p><p><img src="//bstatic.djyde.com/DSC02391.JPG?x-oss-process=image/resize,w_2560/quality,q_80" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为配置高和屏幕大，iPad Pro 可以做的比原本 iPad mini 多得多 —— 处理照片、浏览网页、用 Apple Pencil 做笔记（当然现在新款 iPad mini 也支持 Apple Pencil 一代）。</p><p>作为程序员，在短暂出游时能不能以 iPad Pro 替代 Macbook, 我是持怀疑态度的。在编程领域，iPad Pro 离生产力工具还差得很远。但是 iPad Pro 能满足我除编程以外 99% 的需求。</p><p>另外一个矛盾的地方是，如果我带上键盘去用 iPad Pro, 那么我为什么不直接用 Macbook 呢？有人会说，iPad Pro 11 寸的重量只有 468 克，而我手上的 Macbook Pro 15 寸则有 1830 克，是几乎 5 台 iPad Pro 的重量。但说实话，背在背包里，我根本不介意这 1400 克的差异，所以于我而言，iPad Pro 太尴尬了，它可以做很多，但 Macbook Pro 可以做得更多。</p><p>对于程序员群体，iPad Pro 是一个可有可无的设备。而对于那些主要以文字录入、图片处理、手写笔记为主要任务的群体，那么 iPad Pro 还是很值得入手的。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://lutaonan.com/link/ipad-stand" target="_blank" rel="noopener">iPad Pro 支架</a></li><li><a href="https://lutaonan.com/link/logitech-k380" target="_blank" rel="noopener">罗技 k380 蓝牙键盘</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://bstatic.djyde.com/DSC02308.JPG?x-oss-process=image/resize,w_2560/quality,q_80&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这次入手 iPad Pro 完全是个意外，原本的计划是入
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人生是不断取舍的过程</title>
    <link href="/blog/everything-is-about-trade-off/"/>
    <id>/blog/everything-is-about-trade-off/</id>
    <published>2019-04-03T10:33:05.000Z</published>
    <updated>2019-04-03T10:40:26.872Z</updated>
    
    <content type="html"><![CDATA[<p>如果问工作以来我悟出的最重要的观念是什么，那就是，人生是一个不断取舍的过程。</p><p>我们总是在作自己未来的规划和目标的时候说，我想要什么，而忽略了问自己一个问题，「我愿意为此舍弃点什么」。我们逃避了残酷的事实 —— 我们每天只有 24 小时，我们什么都想要，但这是不可能的。</p><p>意识到这一点，有利于我们做很多的决策，而且对很多让你感到可惜的事都释怀了。</p><p>有人总是会在年初列下自己的读书清单，但直到年底，发现自己一本都没有读完。这是很多人懊恼和焦虑的来源 —— 为什么我总是无法履行自己的规划？</p><p>过去我总会把原因归咎于没有做好时间管理，但后来我顿悟了，在列下读书清单时，并没有问自己这样的问题 —— 你愿意为读书带来的精神收益，而舍弃点什么？</p><p>如果你在制定任何规划时都这样问自己，那么，你就会在每一次决策前明确这一点：这件事于你而言到底有多重要？如果阅读于你而言比看美剧重要，你就要作出取舍：把你看美剧的时间，花在阅读上。</p><p>如果你认为做得到，那么就让它正式成为你的规划。如果你做不到，那么就不要让它成为你的规划。何必为自己制定一个无法完成的计划呢？它除了为你带来无意义的焦虑，无一用处。</p><p>宁愿看美剧而放弃阅读并不可耻，活得明白是最重要的。只要这是你权衡后作出的取舍，那么你就不会为此而感到焦虑。</p><p>我在<a href="/blog/one-year-of-bulking">《健身一年》</a>里提到，一年前我下定决心开始健身，当时我问自己：我能为健身舍弃什么？</p><p>健身需要耗费每周四天每次 2 小时的时间，这些时间我可以用来写代码，做音乐，阅读。我愿意舍弃他们吗？</p><p>经过权衡后，我决定舍弃他们。于是我获得了一些健身的成果，同时我再也不为放弃了大量的阅读、写代码、做音乐的时间而焦虑。因为我早就知道，如果我想要获得健身的成果，这些是必须放弃的。</p><p>不必为「我没有时间 xxx」而感到可惜，因为你没时间做的事，不过是在为你更想做的事让路而已。（除非你把时间都花在偷懒上）</p><p>每个人有不同的活法，对待事件的优先级也不尽相同。只要认识到「吾生也有涯」的局限，你就可以从每一年底的「责怪自己没有做到什么」转变成「为自己做到了什么而感到高兴」。人生因此也变得简单得多 —— 你只要保证自己不是在虚度光阴即可。</p><p>就像即使我现在惧怕婚姻，若是将来某一天也选择了婚姻，那一定是比起婚姻让我失去的，我更想得到婚姻给我带来的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果问工作以来我悟出的最重要的观念是什么，那就是，人生是一个不断取舍的过程。&lt;/p&gt;
&lt;p&gt;我们总是在作自己未来的规划和目标的时候说，我想要什么，而忽略了问自己一个问题，「我愿意为此舍弃点什么」。我们逃避了残酷的事实 —— 我们每天只有 24 小时，我们什么都想要，但这是不
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>现代的 React</title>
    <link href="/blog/modern-react/"/>
    <id>/blog/modern-react/</id>
    <published>2019-03-08T02:20:47.000Z</published>
    <updated>2019-03-08T02:34:33.442Z</updated>
    
    <content type="html"><![CDATA[<p>我一直很想写一本关于 React 的小书，因为我看到很多刚入门前端或刚开始使用 React 的开发者，对 React 有一些误解。也许是因为 JSX, 让很多人误以为 React 是一种黑魔法 —— 竟然能在 JS 文件里写 HTML! 还有很多围绕 React 的问题，像「状态管理」，就让很多人焦头烂额了。也正是因为 JSX, 让很多人依然用模板的思维去写 React.</p><p>但实际上，如果你理解 React 解决问题的方式的本质，你会发现 React 没有那么难。我写这本小书的主要目的，就是想让还觉得 React 难用的开发者们知道，React 很简单。</p><p>React 是一种构建 UI 的思想，关于 <a href="https://github.com/reactjs/react-basic" target="_blank" rel="noopener">React 的思想</a>，我觉得已经是老生常谈了。在所有从本质层面讲解 React 的文章或书里，总不免提到这样的公式：</p><pre><code>UI = f(state)</code></pre><p>意思就是，UI 是基于状态的一个函数返回值。这也是 Sebastian (React 设计者) 设想的理想状态。直到当我们真正拿 React 来写 UI 的时候，却发现我们很难遵循这个公式——组件的内部状态需要依靠 Class. 而写 Class 是导致 React 使用者困惑的重要原因。</p><p>用 Class 实现内部状态同时也带来了另一个问题——我们怎么复用这些逻辑？常见的做法就是使用 <a href="https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9" target="_blank" rel="noopener">Function as Child Component</a>.</p><p>先不说 Function as Child Component 容不容易被初学者理解, 光是它带来的嵌套问题，就已经足够我们烦恼了——可以想像我们只能用 callback 写 JavaScript 的时代。</p><pre><code class="js">const MyForm = () =&gt; (  &lt;DataFetcher&gt;    {data =&gt; (      &lt;Actions&gt;        {actions =&gt; (          &lt;Translations&gt;            {translations =&gt; (              &lt;Styles&gt;                {styles =&gt; (                  &lt;form styles={styles}&gt;                    &lt;input type=&quot;text&quot; value={data.value} /&gt;                    &lt;button onClick={actions.submit}&gt;                      {translations.submitText}                    &lt;/button&gt;                  &lt;/form&gt;                )}              &lt;/Styles&gt;            )}          &lt;/Translations&gt;        )}      &lt;/Actions&gt;    )}  &lt;/DataFetcher&gt;)</code></pre><p>还有，我们应该怎么解决组件之间的状态共享问题？Redux? MobX? 还是其它状态管理工具？</p><p>React 应该是简单直接的，但越来越多人「谈 React 色变」，正是由于以上的（或者以上没有提到的）问题，认为 React 复杂，难学。很多关于 React 的文章和书都花了不少篇幅来介绍这些解决问题的「设计模式」。</p><p>但随着 React 的不断迭代，有了 Context API, 有了 Hooks API, 一切都变得简单了。我们可以抛开种种「模式」，真正用「函数式」的思维去构建 UI. 这也是标题想表达的意思 —— 我们应该使用「现代」的 React, 去避免不必要的学习成本。</p><p>和著名的《设计模式》一样，很多「设计模式」是为了弥补面向对象的缺陷而出现的。React 通过自身 API 的完善，使我们能少写更多不必要的代码，少学习很多不必要的「模式」。</p><p>我的目的不是在教你怎么用各种 React 相关的库，而是想让读者知道，我们在解决什么样的问题？我们解决问题的方法是什么？别人的库是怎么解决的？</p><p>这个专栏会陆续发布循序渐进的文章。如果你完全没有接触过 React, 那么读完这个专栏后，你就完全能驾驭了 React 了，而且是用优雅的方式去驾驭他。你会发现，<strong>写 React 就是写函数那么简单，只不过这个函数的返回值是 Virtual DOM 罢了</strong>。</p><p>初学者们，请不必因为不懂所谓的「模式」而感到惭愧，尽情享受技术发展带来的红利吧。</p><hr><p>这是我在小专栏付费连载的<a href="https://xiaozhuanlan.com/modern-react" target="_blank" rel="noopener">《Modern React》</a>的前言，目前正在限时打折，有兴趣的朋友可以订阅。</p><p>之所以选择连载的方式，是因为我想要通过读者的反馈去决定我接下来连载的内容。欢迎读者们积极地来信反馈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我一直很想写一本关于 React 的小书，因为我看到很多刚入门前端或刚开始使用 React 的开发者，对 React 有一些误解。也许是因为 JSX, 让很多人误以为 React 是一种黑魔法 —— 竟然能在 JS 文件里写 HTML! 还有很多围绕 React 的问题，像
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>健身一年</title>
    <link href="/blog/one-year-of-bulking/"/>
    <id>/blog/one-year-of-bulking/</id>
    <published>2019-01-14T07:05:37.000Z</published>
    <updated>2019-05-07T11:04:14.887Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文不提供训练计划<br>本文不提供饮食计划</p></blockquote><p><img class="small" src="https://s2.ax1x.com/2019/05/07/EsOH9s.jpg"></p><p>我在<a href="/blog/2018-summary">《2018 年终总结》</a>里提到了我健身的成果，在这篇文章里，我将分享我健身的过程，以及身体上、心智上的一些成长。</p><h2 id="接触健身的经历"><a href="#接触健身的经历" class="headerlink" title="接触健身的经历"></a>接触健身的经历</h2><p>说来惭愧，我第一次接触健身是 2015 年。当时刚出来工作，有点闲钱，看到镜子里的那只瘦猴，决定开始去健身房增肌。于是在知乎搜索了很多关于增肌的回答，选了住处附近的一家健身房，就开始瞎练了，没有计划，也不知道怎么做计划。</p><p>那时我身高 165, 体重 46kg. 想做卧推，空杆（20kg）都推不起；想做划船，动作做不好。这时候在健身房确实很大压力，什么都做不好，还怕占着别人地方。</p><p>这样坚持了 2 个月，没什么效果。自然就放弃了。过了一段时间，我决定花钱请一个私教，重新开始我的增肌计划。那时已经是 2016 年了，我买了 10 节私教课。商业健身房私教的惯用套路——先去跑步机热身，然后教我做些动作。</p><p>10 节课下来我没学到什么东西，因为教练只告诉你做什么动作，怎么做，有什么注意的，却没有讲为什么。除了上课，我也在 YouTube 看很多关于健身的视频。坚持了 3 个月左右，没太大的效果，又一次放弃了。</p><p>之后很长一段时间，偶尔 YouTube 会根据我的用户画像给我推荐一些健身类的视频，我每次看到都觉得很羞愧——我无法面对这个坚持不下去的自己。我那里常常想，如果我当初坚持下来了，那么我已经有很大变化了吧。</p><p>虽然我很矮，但是说实话，我很少因为我的身材自卑，除了限制了我追女生的范围以外，我的身高没有给我带来什么不好的事。但是我总是隐约地觉得自己很孱弱，我觉得我不能保护我喜欢的人，不能给人安全感。夏天穿衣服像一个毒友似的。这些倒是我比较在意的。</p><p>导火线是 2017 年年底，我在某个停车场被一个保安言语暴力（过程不表），我十分生气，当时我想：是不是因为我看上去太弱了，所以这个保安敢这么对我说话？如果我强壮一些，或许就不需要和傻x讲道理了。我自己都缺乏安全感，怎么让别人有安全感呢。</p><p>回到家我想了很久，决定认真对待健身这件事。<strong>我问自己一个最重要的问题：我能为健身付出多少时间？</strong>如果我每周训练 4 天，那么我将会大量减少自己业余的代码时间和玩音乐的时间，我是否能接受？</p><p>当然，我最后选择了接受，于是才有了今天的一点点成果。</p><h2 id="关于请教练"><a href="#关于请教练" class="headerlink" title="关于请教练"></a>关于请教练</h2><p>和前两次不同的是，我不再选择商业健身房，而是去找一些更专业些的以授课为主的健身工作室。恰好当时看中的一家工作室在做活动，很优惠，就买了 10 节课，开始了我的第三次健身…</p><blockquote><p>为了避免广告嫌疑，就不说是哪家工作室了。</p></blockquote><p>以我的经历，工作室和商业健身房比，私教的价格没有相差太多，买的课少（10节以内）可能相差 100 左右。买得多一些，差距就明显了。但是我是宁愿多花 100 上 10 节我能学到东西的课，也不想便宜 100 块上 10 节没有意义的课。</p><p>严谨地说，在商业健身房遇到靠谱教练的概率比在工作室要低得多。「靠谱」体现在：</p><ul><li>对健身的热情</li><li>丰富的理论知识</li><li>能和客户建立真正的有效关系</li></ul><p>至于可不可以不请教练，我觉得天下间没有什么是不可以的。很多人一直自己练也练得很好。自己练的风险主要在于，你可能需要花更长的时间去探索正确的动作，也可能出现受伤的情况。所以我觉得请不请教练，是看你愿不愿意花钱规避这些风险罢了。</p><p>我自己主张的是有条件就尽量找教练（前提是靠谱的教练），因为<strong>我分析自己之前放弃的最大的原因就是不相信自己的训练</strong>，我不知道自己的动作到底有没有效。新手最大的问题是没有什么感受度——你根本感受不到自己的背部肌肉，怎么知道自己划船有没有划对呢。有教练的最大好处，就是他知道你有没有做对。这样就就不会怀疑自己是不是做了无用功了。</p><p>应该买多少节课呢。我当时买了 30 节课（做活动买的 10节 + 之后买的20节），后来我觉得 20 节课其实就足够了。我的训练频率是一周 4 练，上到 20 节课的时候，我基本已经可以自己独立训练了，也能感受得到自己的肌肉。最后 10 节课我都是专门让我教练辅助我练习我的弱项深蹲的。</p><p>最后关于跟着教练训练很重要的一点是，根据教练为你制定的训练计划去做没有问题，<strong>但你一定要自己理解这个训练计划</strong>，不要天天无脑地教练说做什么就跟着做，<strong>多问教练为什么要这样安排？这样安排的好处是什么？同样是练这个肌群的动作，这个动作和另外一个动作有什么区别？</strong>时刻提醒自己，这是你自己的训练，教练不是你的秘书（除非你这辈子都一直请教练），想想看，离开教练了以后，你能不能制定适合自己的计划？你从教练身上学到了什么东西？</p><p>我从我的教练身上学到的除了基本的动作模式以外，还学到的是，不要让客观条件限制了你的训练。训练动作不是死的，不是说没有平板凳、没有杆，就不能练胸了。多看看你现在有什么，能不能用现有的东西，去创造一个新的训练方式（即使效果不是最好的）。这是建立在你真正了解你的肌群是怎么工作的基础下才能做到的。所以我自己在业余的时间，也会去了解解剖学方面的知识。</p><p>当你在工作室上完课了，再转到费用更低的商业健身房也不迟。</p><h2 id="关于饮食"><a href="#关于饮食" class="headerlink" title="关于饮食"></a>关于饮食</h2><p>「三分练，七分吃」，这句话都被说滥了。我个人觉得饮食比训练难太多了。特别是我这种所谓的「怎么吃都不胖」的瘦子。</p><p>其实根据观察，很多瘦子说的「怎么吃都吃不胖」，主要的原因还是吃太少，只是<strong>以为自己吃很多</strong>。像我，没健身的时候，对食物是很任性的——想吃就吃，不想吃就算了。我甚至认为人不应该浪费时间去吃饭，因为不吃也不会饿。吃饭的时候，一盘子的饭，我吃半盘就觉得太饱了，觉得自己吃了很多东西。但我后来观察那些稍胖的人吃饭，饭量起码是我的几倍。</p><p>健身以后，每天得强迫自己加餐，鸡蛋、坚果、鸡胸肉等等。刚开始训练的时候，我牛奶是买一升的那种，每天一升。</p><p>我不是专业的营养师，但我可以在这里科普一下，健身的时候应该怎么安排饮食。</p><p>不同的训练目的有不同的饮食方案：</p><ul><li>增肌：维持热量冗余</li><li>减脂：维持热量缺口</li></ul><p>这里所说的热量，指的是一个人正常活动时所消耗的热量（<a href="https://zh.wikipedia.org/zh-hans/%E5%9F%BA%E7%A1%80%E4%BB%A3%E8%B0%A2%E7%8E%87" target="_blank" rel="noopener">BMR</a>）。所以从数学上来看，增肌和减脂都是很简单的——了解自己的 BMR, 然后针对需求调节自己的热量摄入。</p><p>如何控制呢？从控制提供热量的三个元素入手：脂肪、蛋白质、碳水化合物。</p><p>我不打算在这里大开篇幅去讲怎么去计算，因为 Google 一下你马上就知道怎么算了。我想说的是，<strong>一定要计算你的摄入量</strong>。例如增肌，如果你不去估算你自己今天吃有大概多少的热量，那么 99% 你是吃不够的。</p><p>肌肉合成需要蛋白质，所以增肌要保证足够的蛋白质摄入。关于摄入多少，众说纷云。我自己是按照自己体重（kg）乘以 2 换算成克 (g) 为单位的量。例如，体重是 50kg 时，每天至少需要摄入 50 x 2 = 100g 的蛋白质。然后用什么食物去满足这个量，就是你自己的决定了。</p><p>关于更详细的饮食计划，可以看看卓叔的 <a href="https://zhuanlan.zhihu.com/p/21374019" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="关于蛋白粉"><a href="#关于蛋白粉" class="headerlink" title="关于蛋白粉"></a>关于蛋白粉</h3><p><strong>能不能喝？有没有副作用？</strong></p><p>能。没有（除非你的肾本来就有病变）。</p><p><strong>喝多少？是不是每天都要喝？</strong></p><p>上面已经提到了，你需要计算你每天要摄入多少热量。如果通过三餐或补餐你还是吃不够，那就用蛋白粉（或增肌粉）补够。蛋白粉不是药物，是补剂。这是很简单的数学问题。</p><h2 id="关于训练"><a href="#关于训练" class="headerlink" title="关于训练"></a>关于训练</h2><p>我的训练计划是每周 4 练：腿（+胸）、胸（+背）、背（+胸）、肩。</p><p>我不打算在这里详细列出我正在使用的训练计划，也不会教你怎么制定计划（这应该是你教练的任务），而是分享我一直训练以来的一些小经验。</p><ul><li>深蹲、硬拉、卧推这三大项是必须学习的，无论是健力还是健美，三大项都是基础。我在商业健身房练了这么久，没有亲眼目睹有教练教深蹲的。所以还是那句话，有条件，尽量选择健身工作室。</li><li>如果你是瘦子，没有太大的必要去做有氧。除非你对心肺能力有要求。</li><li>多做自由力量。固定器械除了安全，对新手没有多大的好处。卧推都没学会，就别去夹胸了。</li><li>学习卧推时，瘦子可能（反正我当初是）连空杆（20kg）都推不稳，建议可以找更轻的杆（我们当时工作室有粉红色的 8kg 的杆）去训练，再慢慢地增加重量。</li><li>记住，新手期，大重量不是你的目标，你的目标是熟悉动作模式。</li><li>新手期，没有必要特别去练你的小肌群，例如手臂（肱二头、三头），手臂的力量会随着三大项成绩的提升而慢慢提升。</li><li>刚开始背部没有感觉，可以选择相对简单一点的动作，例如反向划船。也可以选择感受度高一点的动作，对我自己来说，练背最有感受度的动作是哑铃单臂划船、对握引体向上、固定轨迹的高位下拉。</li><li>关注一下你的关节活动度。这是很多人忽略的。可以问问你的教练，对你的关节灵活度做一个测试。活动度如果不足，要做一些针对性的动作解决一下。不然会一定程度影响训练。我的肩关节活动度受限就很影响我的训练。</li><li>健身先健脑，健身是一门复杂的学问（营养学、解剖学、运动生理学），像你做其它事一样，不断地学习，才会越做越好。</li></ul><p>还有很重要的一点是：<strong>一定要对自己的训练做记录。</strong> If you don’t mesure it, how can you improve it? 记录你计划里的所有动作，重量、组数、做完后的感受（这很重要，下一次训练是否增加重量需要参考上一次的感受，比如，如果累的程度是 10，这一次训练完的程度是多少？）。<strong>如果没有训练记录，那么你到健身房可以做的动作只有——闲逛。</strong></p><p>每一次踏入健身房，你的目标就是，能不能比上一次训练推更大的重量。如果不能，分析自己在哪个环节出了问题——吃不够？还是睡不够？然后去修正自己的问题——睡不够，那就早点睡；吃不够，就吃更多。</p><p><strong>我很害怕健身房里其它人的目光，怎么办？</strong></p><p>其实没有什么人在意你。大家的目光一般是在漂亮的女性，或练得很好的人身上的。我自己在健身房里见瘦子，我的脑回路是这样的：</p><ol><li>啊，我以前也是这样的</li><li>很期待看到他坚持下去之后的变化</li><li>他需不需要帮助呢</li></ol><h2 id="怎么选健身房"><a href="#怎么选健身房" class="headerlink" title="怎么选健身房"></a>怎么选健身房</h2><p>一般来说，健身工作室的设备不会有太大的问题。如果你去找商业健身房，要考虑的因素有：</p><ul><li>地理位置。这是最重要的，选一个在你能接受的范围内的。我现在去的健身房，从公司骑车要 10 分钟左右。</li><li>进去先直奔自由力量区：有没有足够的哑铃？有没有足够的杠铃片？最重要的，<strong>有没有自由深蹲架？</strong>没有深蹲架基本可以走了。</li><li>有没有可以让你做硬拉的区域？有的健身房是有一个硬拉区域的（或者在深蹲架里也可以硬拉）。</li></ul><h2 id="关于坚持"><a href="#关于坚持" class="headerlink" title="关于坚持"></a>关于坚持</h2><p>怎么去坚持健身？这是很多人问的问题。</p><p>首先是问自己，为什么开始健身？找到你的源动力。对我自己来说，源动力就是想变得强壮，遇到傻x的时候能自信地面对。</p><p>其次，一定要设立一个目标。而且必须是一个明确的目标。别说什么「我的目标是身体健康」，定一个可以量化的目标。我最初给自己的目标就是：2018 年底至少要体重要达到 60kg (当然我失败了)。如果没有一个可以量化的目标，在你没有爱上健身这个运动之前，你很容易会放弃的。</p><p>然后是不要和别人宣称你在健身，这对你的训练没有任何帮助，甚至会被嘲讽。更加不要傻到在朋友圈打卡——<strong>在你没有取得成果之前，没有人在意你的过程</strong>。打卡的唯一收获只会是更多人把你屏蔽了。</p><p>当你健身了一段时间，在吃、睡、练三件事都做好的基础上，第三个月绝对会有明显的效果，这是新手的福利期。很快会有人问你，咦？你是不是健身了，怎么壮了那么多（这是我健身 4 个月左右的时候听得最多的一句话）。这时你获得了成就感，享受了健身给你带来的改变，使你继续坚持下去。一直到坚持半年了，你会发现，健身渐渐地变成了你生活中的一部份。</p><p><strong>当健身成为了你的一种生活方式时，哪有什么坚持不坚持。</strong></p><p>我很多次洗澡脱光衣服看到自己身体的变化，都很感谢一年前的我坚持下来了。我再也不用对自己说「如果我当时…」</p><p>如果你说，「我很想健身，但是我没时间啊！」</p><p>据我观察，很多人所谓的没有时间，是不愿意花时间在健身上面而已。一天只有 24 个小时，除去上班的时间，我的时间很少，但为了健身，我减少了我写代码和玩音乐的时间，这是我付出的代价。<strong>如果你不愿意留你最多 2 小时的时间给健身，只能说明健身这件事在你的生活里优先级不够高罢了</strong>。</p><p>不愿意把时间花在健身上面并不可耻，这再正常不过了。每个人有每个人的生活方式。如果你用「没有时间」作为借口，那么你相当于在说，我们这些健身的，都是闲得慌的。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://lutaonan.com/link/gainer" target="_blank" rel="noopener">我喝的增肌粉</a></li><li><a href="https://lutaonan.com/link/protein" target="_blank" rel="noopener">我喝的蛋白粉</a></li><li><a href="https://lutaonan.com/link/belt" target="_blank" rel="noopener">我用的腰带</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文不提供训练计划&lt;br&gt;本文不提供饮食计划&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img class=&quot;small&quot; src=&quot;https://s2.ax1x.com/2019/05/07/EsOH9s.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;我在&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我买过的实体唱片</title>
    <link href="/blog/show-my-albums/"/>
    <id>/blog/show-my-albums/</id>
    <published>2019-01-13T12:13:11.000Z</published>
    <updated>2019-03-08T02:11:41.092Z</updated>
    
    <content type="html"><![CDATA[<p>今天做大扫除，顺便整理了一下我的 CD, 突然想到可以和大家介绍一下我的这些 CD.</p><iframe src="//player.bilibili.com/player.html?aid=40647717&cid=71385881&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>YouTube 地址：<a href="https://www.youtube.com/watch?v=4IwFVdxJywQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=4IwFVdxJywQ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天做大扫除，顺便整理了一下我的 CD, 突然想到可以和大家介绍一下我的这些 CD.&lt;/p&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=40647717&amp;cid=71385881&amp;page=1&quot; scrolling
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>本博客的赞助渠道</title>
    <link href="/blog/donation/"/>
    <id>/blog/donation/</id>
    <published>2019-01-10T02:15:39.000Z</published>
    <updated>2019-04-08T02:10:27.793Z</updated>
    
    <content type="html"><![CDATA[<p>你可以通过以下几种赞助渠道表达对我的支持，支持我不断地更新下去：</p><ul><li>订阅我的<a href="https://xiaozhuanlan.com/djyde" target="_blank" rel="noopener">付费专栏</a> （付费专栏完全同步我的博客内容，但不排除之后会有独家内容）</li><li><a href="https://patreon.com/djyde" target="_blank" rel="noopener">成为我的 Patron</a></li></ul><p>当然，不捐款你也不会失去什么。你还是可以免费读到我的所有博客内容。</p><p>感谢通过各种渠道捐赠过我的所有人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你可以通过以下几种赞助渠道表达对我的支持，支持我不断地更新下去：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订阅我的&lt;a href=&quot;https://xiaozhuanlan.com/djyde&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;付费专栏&lt;/a&gt; （付费专栏完
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 年终总结</title>
    <link href="/blog/2018-summary/"/>
    <id>/blog/2018-summary/</id>
    <published>2019-01-07T03:12:48.000Z</published>
    <updated>2019-05-15T02:07:37.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大人热爱数字。如果你跟他们说你认识了新朋友，他们从来不会问你重要的事情。他们从来不会说：“他的声音听起来怎么样？他最喜欢什么游戏？他收集蝴蝶吗？”</p><p>他们会问：“他多少岁？有多少个兄弟？他有多重？他父亲赚多少钱？”只有这样他们才会觉得他们了解了他。</p><p>如果你对大人说：“我看到一座漂亮红砖房，窗台上摆着几盆天竺葵，屋顶有许多鸽子……”那他们想象不出这座房子是什么样子的。你必须说：“我看到一座价值十万法郎的房子。”他们就会惊叫：“哇，多漂亮的房子啊！”</p><p>—— 《小王子》</p></blockquote><p>2018 对我自己来说，是灰心的一年。这一年除了和往年一样的焦虑以外，也没有做成什么我认为了不起的事。很大的原因是我对技术失去了信心。</p><p>小时候，我最大的理想是「用技术改变世界」，但我早在我的 <a href="/blog/2017-summary/">2017 年终总结</a> 里提到：「技术并不是那么重要，它只不过是一种手段而已」。今年我更加确信这一点，我们做技术的人，永远只能间接地改变世界。一个可以改变人们生活方式的产品，技术虽是不可缺少的部份，但也不是起决定性作用的部分。</p><p>于我而言这是灾难性的信仰崩塌。</p><p>有时夜里我也会反思，是不是对自己的要求太高了，又或者是，我太想向别人证明自己，害怕自己变得平庸。而在今年，我意识到自己真的变得平庸了，所以我把他称为灰心的一年。</p><p>而今年最主要的心态变化，则是随着年龄的增长和财富的积累，我不免也会想到未来的现实生活。婚姻、家庭、置业，等等。我觉得这些东西不能带给我快乐，它们不是我想要的。但是为什么每一个人都要「善意」地提醒我，你应该这样，应该那样呢。我不买房，便错么？成年人的眼里，为什么都只有所谓的「保值」、「升值」呢。</p><p>我们总说大人们不关心孩子们快不快乐，只关心孩子们的成绩。原来大人们也不关心大人们快不快乐啊。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年除了支撑了几个业务的后台管理系统以外，主要在思考的东西是如何利用 GraphQL 帮助开发者更轻松地应对中后台管理系统的开发。</p><p>在内部做了很多基建以后我有一个感悟，我们做基建的初衷是提高开发者的效率，但是实际上，影响开发者效率的因素，很大程度是开发者本身。基建能做的很有限。举例来说，Redux 这么一个「简单」的库，却有很多人用不好。在项目里，很多可以简单实现的地方，由于编程水平、经验、对库/框架的了解程度等等条件的不足，开发者就把简单的问题复杂地解决了。</p><p>即使给人一台最好的单反，也不一定拍得出最好的照片——因为重点还是镜头背后的那颗脑袋。</p><p>所以在新的一年，我的目标是多输出一些理论层面的东西。</p><h2 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h2><p>2018 年依然是没有节制地消费，不过买的东西已经不多了（该买的都买过了）</p><ul><li>把 Yamaha 的电子琴换成了 Korg Kross1</li><li>搬到了一个 43 平米的一房一厅</li><li>买了 TASCAM 录音笔</li><li>买了 Scarlett 2i2 音频介面 （用来录些 cover）</li></ul><p>（不得不提欧德堡全脂牛奶是大概一周一箱…）</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>今年尝试性地做了一集技术的短视频内容：<a href="http://www.bilibili.com/video/av36543409" target="_blank" rel="noopener">《解读 The State of JavaScript 2018》</a></p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>2018 年我做了决定，我的生活不再是 80% 的 coding time 了，我把更多的时间，花在了别的地方——音乐、健身、读书。这是一个巨大的变化，因为在以前，代码几乎是我生活的全部。<strong>我意识到，如果我稍微放下一点点的代码时间，生活里还可以拥有更多有趣的东西。</strong></p><h3 id="健身"><a href="#健身" class="headerlink" title="健身"></a>健身</h3><p><img class="small" src="//bstatic.djyde.com/assets/006tNc79ly1fyy4u0ie1bj30pa0pan1o.jpg"></p><p>健身可以说是 2018 年唯一一件做成了的事情。我从 2018 年 1 月份开始健身，每周训练 3-4 天，控制饮食。直到现在刚好整整一年，达到了从 46kg 到 54 kg 的变化。</p><p>如果问我是怎么坚持下来的，我认为无论是坚持什么，都是：因为相信，所以咬着牙坚持试试，坚持了一段时间后，它就成了你的一种生活方式。<strong>当它成为了你的一种生活方式的时候，就无所谓坚持和不坚持了</strong>。就像你不会去问别人是怎么「坚持」看美剧的一样。</p><p>关于更多我健身的经验，我会在之后单独写一篇文章分享。</p><h3 id="德州扑克"><a href="#德州扑克" class="headerlink" title="德州扑克"></a>德州扑克</h3><p>今年学会了德州扑克，和朋友打了很多场。我非常喜欢这个扑克游戏，他让我更了解我的牌友，更重要的是，在牌局里，我意识到了自己的缺点：冒进、喜欢承受高风险高回报、贪婪、充满侥幸心理。每次打完，通过回顾自己的打法，我更加了解我自己，我会反思：</p><ul><li>是不是贪婪让我失去了我的筹码？</li><li>下一次我再遇到相同的情况时，我如何控制自己的欲望？</li><li>我应该付出多少的筹码，才是一次价值下注，才能击败我的对手？</li><li>面对失败时，我是否能做到及时止损，调整心态？</li><li>当我读到对方的牌有 80% 的概率是比我强的时候，我是否可以克服自己的侥幸心理而不去跟注？</li></ul><p>德州扑克结合了运气、心理、概率、演技，它不仅是人与人之间的博弈，也能让你有不妥协于运气的机会——你拿一手烂牌，仍然能打好（当然，运气有时候也会打败你，本来在转牌时胜利在望，河牌却是别人的翻身之牌）。</p><p>我还转载排版了世界扑克巡回赛（WPT）总决赛冠军老邱的小传记 <a href="https://randyloop.gitbooks.io/the-legend-of-david-chiu/content/" target="_blank" rel="noopener">《赌士列传: 老邱传奇》</a>。相信你可以通过这篇传记感受到德州扑克的魅力。</p><h2 id="博客成绩"><a href="#博客成绩" class="headerlink" title="博客成绩"></a>博客成绩</h2><p><img src="//bstatic.djyde.com/assets/006tNc79ly1fyy7f777sfj31im0cead2.jpg" alt></p><p>在这一年收到了挺多的读者来信，向我询问建议，我都尽量抽时间一一回复。还有一些文章收到的打赏留言里提到的因为我的文章而有所收获，让我知道我写的博客的确有他的价值所在。</p><h2 id="关于-2019"><a href="#关于-2019" class="headerlink" title="关于 2019"></a>关于 2019</h2><p>希望把生活过得更有趣一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;大人热爱数字。如果你跟他们说你认识了新朋友，他们从来不会问你重要的事情。他们从来不会说：“他的声音听起来怎么样？他最喜欢什么游戏？他收集蝴蝶吗？”&lt;/p&gt;
&lt;p&gt;他们会问：“他多少岁？有多少个兄弟？他有多重？他父亲赚多少钱？”只有这样他们才会觉得他
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018 香港流行音乐推介</title>
    <link href="/blog/2018-cantonpop-list/"/>
    <id>/blog/2018-cantonpop-list/</id>
    <published>2018-12-19T03:46:37.000Z</published>
    <updated>2019-03-08T02:11:41.087Z</updated>
    
    <content type="html"><![CDATA[<p>「香港乐坛已死」已经不是什么新鲜的论调，这句话也经常被用于伪装自己对当代流行音乐颇有研究。作为一个港乐爱好者，我对此一直持相反的意见。港乐没死，但它的确从大众变成小众了。</p><p>「<a href="https://blog.yitianshijie.net/2018/12/03/pop-and-nostalgia/" target="_blank" rel="noopener">流行文化产品是时代气息的显影</a>」，显然，当代粤语片区大多数人们变得不再需要粤语流行歌曲，他们比以前有更多选择，例如综艺、韩国流行文化等等。当然也和当代人接触信息的媒介有很大的关系，毕竟如果消费者可以满足于连「俗气芭乐」都不如的《学猫叫》，那么又何必费钱费心思去做更具音乐性的音乐作品呢。</p><p>当粤语片区的年轻一代人「抛弃」了电视机，加上国内串流音乐服务的版权问题，粤语流行文化在国内就很难传播进来了。如果不是主动接触它，关注它，粤语流行歌曲几乎没有机会进入你的耳朵。唯一的机会是香港艺人参加国内的音乐类综艺节目，但为了照顾观众，唱起了国语，发行的也是国语唱片。</p><p>不发国语唱片的新生代香港音乐人自然更难被发现，但港乐从旋律、编曲、填词都不输中国大陆（以及台湾地区）的流行音乐。下面是一个歌单，这些歌是我心目中 2018 年发行的粤语歌曲中最好的。听完这些歌，你就可以大概清楚目前港乐的发展状况。它是真的不如其它的流行音乐吗？</p><p>（如果你用 PC 访问这篇文章，在这里会有一个 Spotify 播放器，播放这一整个歌单）</p><iframe class="spotify" src="https://open.spotify.com/embed/user/randyloop/playlist/2A5YT9MzHZw0AilWIu80iW" width="300" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe><p><strong>《心之科学》 容祖儿</strong> 作曲：<strong>Howie@DearJane &amp; 林家謙</strong> / 填词：<strong>黃偉文</strong></p><p><strong>《小问题》 AGA</strong> 作曲：<strong>AGA</strong> / 填词：<strong>陳詠謙</strong></p><p><strong>《未来见》 RubberBand</strong> 作曲：<strong>RubberBand</strong> / 填词：<strong>Tim Lui</strong></p><p><strong>《恐怖情人》 许廷铿</strong> 作曲：<strong>雷頌德</strong> / 填词：<strong>林夕</strong></p><p><strong>《无期》 AGA</strong>  作曲：<strong>AGA</strong> / 填词：<strong>林夕</strong></p><p><strong>《哪儿》 小尘埃</strong> </p><p><strong>《仙乐处处飘》 小尘埃</strong> </p><p><strong>《挥挥手》 JW</strong> 作曲：<strong>Eye Fung</strong> / 填词：<strong>陳詠謙</strong></p><p><strong>《荣辱战争》 林奕匡</strong> 作曲：<strong>林奕匡</strong> / 填词：<strong>陳詠謙</strong></p><p><strong>《人妻的伪术》 谢安琪</strong> 作曲：<strong>雷頌德</strong> / 填词：<strong>林夕</strong></p><p><strong>《睡前服》 小肥</strong> 作曲：<strong>小肥</strong> / 填词：<strong>Tim Lui</strong></p><p><strong>《天才儿童 1985》 张敬轩</strong> 作曲：<strong>伍樂城</strong> / 填词：<strong>黃偉文</strong></p><p><strong>《重阳》 邓小巧</strong> 作曲：<strong>林家謙、謝國維</strong> / 填词：<strong>黃偉文</strong></p><p><strong>《百年树木》 张敬轩</strong> 作曲：<strong>伍卓賢</strong> / 填词：<strong>林若寧</strong></p><p><strong>《风尘三侠》 小肥/侧田/6号@RubberBand</strong> 作曲：<strong>李偉@RubberBand</strong> / 填词：<strong>林寶</strong></p><p><strong>《如何从夏天活过来》 黄妍</strong> 作曲：<strong>黄妍</strong> / 填词：<strong>黄妍</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;「香港乐坛已死」已经不是什么新鲜的论调，这句话也经常被用于伪装自己对当代流行音乐颇有研究。作为一个港乐爱好者，我对此一直持相反的意见。港乐没死，但它的确从大众变成小众了。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&quot;https://blog.yitianshijie.net/2018
      
    
    </summary>
    
    
      <category term="music" scheme="/tags/music/"/>
    
  </entry>
  
  <entry>
    <title>我在学校学到的东西</title>
    <link href="/blog/things-i-learnt-at-school/"/>
    <id>/blog/things-i-learnt-at-school/</id>
    <published>2018-10-04T12:42:17.000Z</published>
    <updated>2019-03-08T02:11:41.093Z</updated>
    
    <content type="html"><![CDATA[<p>今年身边的朋友陆陆续续毕业出来工作了，偶尔有机会的时候会聚在一起聊聊，然后谈到各自的就业情况。我发现有很多朋友还不知道自己想从事的职业是什么，因此也不知道自己未来会怎么样，先做着现在能做的。</p><p>因为我的经历特殊，有人也会对我开玩笑说真不知道读书有什么用，还不如早点出来工作。我知道以我朋友的受教育程度来说，这肯定只是玩笑，他们不可能是「读书无用论」者，所以我也会附和着笑。</p><p>虽然这只是句玩笑话，但是确实令我回顾了一下我从我的在校生涯中得到了什么东西。</p><p>我首先想到的是英语。我的小学是从一年级开始就有英语的课程，所以我接触英语的时间很早。我自认小学四年级以前我还是个很乖的学生，上课认真听讲，作业按时完成。所以我的语数英成绩都很不错。从小培养了「语感」，使得我一直以来可以低障碍地读写英文。这对我的编程学习、职业生涯都有很大的意义。懂英文让我可以亲自融入整个开源社区、技术社区，可以直接在 YouTube 听别人在 Conference 的 Talks, 吸取别人的思想。而不是等别人翻译过来。我认为能低障碍地读写英语是技术人成长很重要的条件。</p><p>尽管我对现阶段的英语教育方式仍然存疑，我还是认为在基础教育里，英语是必不可少的。</p><p>我的价值观和人生观，是我于在校生涯之中建立的。不过不要误会，这些都不是学校的课程直接赋予我的，而是<strong>学校这个「象牙塔」，让我可以有充分的时间去读书、学习和思考</strong>。我虽然在班上是「差生」，但我敢说我是最爱学习和读书的。这句话要是被我当年的老师看到，估计他要笑个半死，但这是事实，不可否认。我在学校不用供车供房工作赚钱，我可以把一整天的时间花在读书上，<strong>我在我读的所有书里懂得了我应该成为一个什么样的人</strong>、我应该努力让自己拥有什么样的品格才能算是一个「好人」。</p><p>另外，我很多技术书籍都是在学校读的，比如《JavaScript 高级程序设计》，我读了很多遍。不是我自己想读那么多遍，而是当时我带回学校的就只有这一本书，我一个月才回家一次。那一个月我只能天天都读他。这本书我每读一遍都有新的发现。</p><p>出来工作以后我还能像这样把一本好书读这么多遍又读这么认真吗？可以，但是很难了。</p><p>我高中的时候，最喜欢上语文课。语文课本选的文章其实挺好的，比如说有《棋王》，以及很多《古文观止》里面的文言散文。偶尔发个新试卷，我也很开心，因为一张语文试卷有两篇阅读理解。我高中读的很多书，都是在试卷里和练习册里发现的，新的练习册一发下来，我就把所有的阅读理解都看一遍，看到哪篇我觉得不错的，我就看是节选哪本书，然后就去图书馆借回来。另外，写作文大概是我在学校里唯一的思考输出的方式了，因此我很珍惜每次写作文的机会，我把自己的所思所想全写进文章，以至于每次都很低分，因为离题万里。我的语文老师对我很包容，他知道我想什么，我很感谢他。</p><p>有人会说，你把学校说得那么好，你自己怎么就辍学了呢。</p><p>我认为，一个人在结束学校生涯以前，必须先弄清楚两个问题。一个是，<strong>在离开学校以后，你在社会上是以一个什么样的角色存在？</strong>另一个是，<strong>你是否已经为迎接这个角色做好了充分准备？</strong>学校的意义就是给你时间想清楚问题一，然后给你条件完成问题二。</p><p>我在学校里，早已弄明白了这两个终极问题。我在社会上，将会以软件工程师的角色存在，并且我已经有能力胜任这个职位。往小的说，我能为我所在的公司创造价值，往大的说，我要为整个社区作出贡献。所以（在一所不怎么样的）大学对我来说已经不那么重要了，我希望早点投身社会创造价值。</p><p>很多人就是因为在学校的时候从来不思考这两个问题，所以是「光着身」离开学校的。你是想创造价值，还是想做着不喜欢的工作然后满足于 <a href="https://wiki.mbalib.com/wiki/%E5%A5%B6%E5%A4%B4%E4%B9%90%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">奶头乐</a> ，其实都由你自己决定。</p><p>以上，就是我在学校学到的东西。</p><p><strong>延伸阅读</strong></p><ul><li><a href="https://www.jianshu.com/p/37e022fa5f34" target="_blank" rel="noopener">《科学的方法， 公正的态度，果断的决心》— 竺可桢</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年身边的朋友陆陆续续毕业出来工作了，偶尔有机会的时候会聚在一起聊聊，然后谈到各自的就业情况。我发现有很多朋友还不知道自己想从事的职业是什么，因此也不知道自己未来会怎么样，先做着现在能做的。&lt;/p&gt;
&lt;p&gt;因为我的经历特殊，有人也会对我开玩笑说真不知道读书有什么用，还不如早
      
    
    </summary>
    
    
      <category term="exp" scheme="/tags/exp/"/>
    
      <category term="depth" scheme="/tags/depth/"/>
    
  </entry>
  
  <entry>
    <title>一个阅读源代码的技巧</title>
    <link href="/blog/trick-for-reading-source-code/"/>
    <id>/blog/trick-for-reading-source-code/</id>
    <published>2018-09-14T06:14:07.000Z</published>
    <updated>2019-05-15T02:07:37.051Z</updated>
    
    <content type="html"><![CDATA[<p>昨天和朋友聊到阅读开源代码，我分享了自己一个读代码的技巧，就是从第一个 commit 开始读。</p><p><img src="//bstatic.djyde.com/assets/0069RVTdgy1fv921gu1dtj31kw0z3aei.jpg" alt></p><p><img src="//bstatic.djyde.com/assets/0069RVTdgy1fv927o4mqtj31kw0xz11u.jpg" alt></p><p>从第一个 commit 读源码的好处是：</p><ul><li>学习别人从零开始建立项目的步骤</li><li>一个项目经过漫长的演进后，有很多代码是为了解决特殊场景（或者 bug）而写的，这些代码对于理解核心逻辑来说，是一种干扰。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天和朋友聊到阅读开源代码，我分享了自己一个读代码的技巧，就是从第一个 commit 开始读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//bstatic.djyde.com/assets/0069RVTdgy1fv921gu1dtj31kw0z3aei.jpg&quot; alt&gt;&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Serlina: 渐进式的 React 服务器渲染框架</title>
    <link href="/blog/announcing-serlina/"/>
    <id>/blog/announcing-serlina/</id>
    <published>2018-08-13T09:44:09.000Z</published>
    <updated>2019-03-08T02:11:41.088Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>副标题: 《可能是最适合 Egg 的 React Serverside-rendering 方案》</p></blockquote><p>上一周周末我花了些时间来完成了一个 React serverside-rendering 框架——<a href="https://github.com/djyde/serlina" target="_blank" rel="noopener">Serlina</a>. 在此想通过这篇文章讲讲 Serlina 框架本身，以及我为什么要开发她。</p><p>(下文中 React Serverside-rendering 均简称为 “SSR”)</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最直接的起因是我们在内部有一个 React base 的项目的首页希望做服务器渲染，我参考了一些方案，如 Next.js, Fusion.js 等等。我很喜欢 Next.js, 我从他刚发布的时候就在持续关注，我认为他已经是最完美的 SSR 方案。</p><p>但是当我试图把 Next.js 接入到我们的服务器端 (<a href="https://eggjs.org" target="_blank" rel="noopener">Egg.js</a> base) 时，我发现 <a href="https://github.com/eggjs/egg/issues/328" target="_blank" rel="noopener">由于 Next.js 需要控制 http context</a>, 导致无法兼容 Egg 程序。</p><p>我认为 Next.js 的核心应该可以脱离 http context. 只需要完成构建配置、renderToString 这些脏活，然后把渲染后的 HTML String 返回即可。于是我浏览了 Next.js 的代码，试图寻找类似 <code>nextjs/core</code> 的东西，然而并没有。Next.js 是一个完整的 Web Framework.</p><p>于是我开始设计一个理念是<strong>脱离服务器实现</strong>的 SSR 框架，并取名为 Serlina. 她和 Next.js 拥有同样友好的开发体验，唯一不同之处是，她不关心服务器实现。</p><h2 id="最简单的例子"><a href="#最简单的例子" class="headerlink" title="最简单的例子"></a>最简单的例子</h2><p>安装依赖</p><pre><code>npm i serlina react react-dom --save</code></pre><p>创建一个应用目录</p><pre><code class="bash">├── index.js├── page│   └── page1.js</code></pre><p>编写一个 React 页面</p><pre><code class="js">// page/page1.jsexport default () =&gt; {  return &lt;div&gt;Hello Serlina!&lt;/div&gt;}</code></pre><p>最后是服务器的实现</p><pre><code class="js">// index.jsconst { Serlina } = require(&#39;serlina&#39;)const path = require(&#39;path&#39;)const http = require(&#39;http&#39;)// 初始化 Serlinaconst serlina = new Serlina({  baseDir: path.resolve(__dirname, &#39;./&#39;)})serlina.prepare()  .then(() =&gt; {    http.createServer(async (req, res) =&gt; {        res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/html&#39; })        if (req.url === &#39;/page1&#39;) {          // 渲染页面          const rendered = await serlina.render(&#39;page1&#39;)          res.write(rendered.string)        } else {          res.write(&#39;works!&#39;)        }        res.end()    }).listen(8090)  })  .catch(console.error)</code></pre><p>通过以上的例子，Serlina 有两个最主要的 API:</p><ul><li><code>prepare()</code> 用于做构建准备</li><li><code>render()</code> 用于渲染 React 页面, 得到 HTML string.</li></ul><p>以上的例子也表达了 Serlina 的核心思想——她处理了 React 服务器渲染的一切脏活，然后把处理好的东西交给你自己去渲染到客户端。</p><p>这就是「渐进式」的意思：你可以在某些地方用她，也可以在某些地方不用她。你可以只在某个路由里面使用 serlina.render() 去渲染。这有点像是一个模板引擎。</p><h2 id="在-Egg-中使用"><a href="#在-Egg-中使用" class="headerlink" title="在 Egg 中使用"></a>在 Egg 中使用</h2><p><a href="https://github.com/serlina-community/egg-serlina" target="_blank" rel="noopener">egg-serlina</a></p><p>我之所以认为 Serlina 是最适合 Egg 的 SSR 方案，是因为我认为 Next.js 是最好的 SSR 方案。而 Serlina 把 Next.js 的体验带到了 Egg, 那么她应该就是最适合 Egg 的 SSR 方案。</p><blockquote><p>以下内容非 Egg 用户可以跳过。</p></blockquote><pre><code>npm i egg-serlina react react-dom --save</code></pre><pre><code class="js">exports.serlina = {  map: {    &#39;/page1&#39;: &#39;page1&#39;  }}</code></pre><p>配置了用 Serlina 渲染的页面后，页面会在 <code>getInitialProps</code> 里得到 egg 的 ctx:</p><pre><code class="js">// {app_root}/client/page/page1.jsexport default class Page1 extends React.Component {  static async getInitialProps({ ctx }) {    // ctx is egg `ctx`    return {      data: await ctx.service.getData()    }  }  render () {    return (      &lt;div&gt;{this.props.data}&lt;/div&gt;    )  }}</code></pre><h2 id="常被问到的问题"><a href="#常被问到的问题" class="headerlink" title="常被问到的问题"></a>常被问到的问题</h2><h3 id="和-Next-js-有什么区别"><a href="#和-Next-js-有什么区别" class="headerlink" title="和 Next.js 有什么区别"></a>和 Next.js 有什么区别</h3><p>关于这个问题，上文已经说得很清楚了。另外，Serlina 并不是要取代 Next.js, 而是希望在某些场景，能成为一种合适的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;副标题: 《可能是最适合 Egg 的 React Serverside-rendering 方案》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一周周末我花了些时间来完成了一个 React serverside-rendering 框架——&lt;a h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多研究些问题，少谈些框架</title>
    <link href="/blog/think-deeper/"/>
    <id>/blog/think-deeper/</id>
    <published>2018-07-16T03:47:35.000Z</published>
    <updated>2019-03-08T02:11:41.093Z</updated>
    
    <content type="html"><![CDATA[<p>当我问应聘者「你有什么问题想问」的时候，大多数应聘者会问我前端应该怎么学。我每次都会很真诚地按照面试过程对他们的了解尝试给他们一些建议。从多次的交流当中，我倒是慢慢地了解到了前端领域里很多普遍的问题。</p><p>前端有很多不同的框架和库。 我上大一的时候，有一门课叫网页设计，前几个课时教 HTML, 又教一个课时 CSS, 再教一个课时 JavaScript. 然后是 jQuery. 当时我很气愤，学生连 DOM 是什么都还没搞清楚，就要他们用 jQuery，这不是误人子弟吗。我后来想明白，学校大概已经把 jQuery 看作是饭碗了。</p><p>把库和框架看作饭碗是无可厚非的， 我们不能苛刻地要求所有程序员都对软件开发抱有发自内心的热爱。但是急功近利地学习框架，绝对是举步维艰的。胡适说「多研究些问题，少谈些主义」，在编程上，我认为需要多研究些问题，少谈些框架。</p><p>框架是我们达到目的的便捷手段，我们使用 React, 更要知道为什么使用它？<a href="/blog/react-and-the-way-building-web-ui/">它的本质是什么</a>？它解决了什么问题？所谓「格物致知」，不「格物」，如何「致知」呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我问应聘者「你有什么问题想问」的时候，大多数应聘者会问我前端应该怎么学。我每次都会很真诚地按照面试过程对他们的了解尝试给他们一些建议。从多次的交流当中，我倒是慢慢地了解到了前端领域里很多普遍的问题。&lt;/p&gt;
&lt;p&gt;前端有很多不同的框架和库。 我上大一的时候，有一门课叫网页
      
    
    </summary>
    
    
      <category term="tweet" scheme="/tags/tweet/"/>
    
  </entry>
  
  <entry>
    <title>2017 年终总结</title>
    <link href="/blog/2017-summary/"/>
    <id>/blog/2017-summary/</id>
    <published>2018-01-03T10:47:44.000Z</published>
    <updated>2019-05-15T02:07:37.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>我的 2017 过得很平淡，可能是因为出来工作已经是第二年了。</p><p>今年比较特别的是身边的朋友都大四了，参加了一些毕业拍照。大家都陆陆续续地开始找工作，面试。偶尔在朋友圈看到朋友拿到 offer, 也会替他们感到开心。</p><p>有很多朋友开始请教我一些出来工作的经验，面试的技巧、offer 怎么选择、租房的经验等等。被问到这些问题的时候我也会很开心。因为以前上学的时候，学业成绩不好，我在班上除了搞搞笑，对身边的同学来说并没有多大的「用处」。</p><p>4 月份的时候上台拿了 16 年的优秀新人奖，但是 17 年整一年没有做出很出色的成绩。慢慢失落地发现在很多事情上，技术并不是那么重要，它只不过是一种手段而已。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3migpdnvj30tx0txaf6.jpg" alt></p><p>在年底，和 @EGOIST 一起创办了 <a href="https://stickeroverflow.org" target="_blank" rel="noopener">StickerOverflow</a>. 成功地让国内的开发者能买到高质量的技术贴纸。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3n2vutcoj30u00u0nah.jpg" alt></p><p>今年想得比较多的是应该如何用自己的能力去帮助更多的人。想过去做培训，想过回大学给以前班的人开个交流会，想过写书。最后都搁置了，因为我后来发现，「助人」有时是一件很一厢情愿的事。</p><p>除了技术外，这一年有很多新的尝试，上台唱歌纪念张国荣，参加了唱歌的比赛，做了一期<a href="http://music.163.com/#/djradio?id=350672104" target="_blank" rel="noopener">音乐电台节目</a>。在新的一年，还想尝试去经营一个音乐博客，让更多人发现被忽略的优秀粤语流行音乐和歌手。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3mgojgc1j30qo0xcafi.jpg" alt></p><h2 id="博客成绩"><a href="#博客成绩" class="headerlink" title="博客成绩"></a>博客成绩</h2><p>今年博客的 PV 和 UV 都小幅度降低了，原因是今年下半年文章写得很少。因为花了不少时间在比写文章更有趣的事情上。</p><p>博客没有广告，但还是会有人因为读文章而受到启发给我赞赏，今年一共收到 ￥136 的赞赏。更开心的是收到了一些真诚的交流邮件。</p><h3 id="PV-UV"><a href="#PV-UV" class="headerlink" title="PV/UV"></a>PV/UV</h3><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn2ebqiqbhj31kw0jvn2k.jpg" alt></p><p>PV: <strong>33,247</strong> (去年 <strong>49,406</strong>), UV: 12,172 (去年 <strong>15,800</strong>)</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn2ec5tdhoj31f00hedhz.jpg" alt></p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn2ehoxfhzj316y0ks771.jpg" alt></p><h3 id="用户访问的时段"><a href="#用户访问的时段" class="headerlink" title="用户访问的时段"></a>用户访问的时段</h3><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn2ek8wd91j30j60v43zv.jpg" alt></p><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn2ekpdlnwj30iu0v4q4x.jpg" alt></p><h2 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h2><h3 id="电子产品"><a href="#电子产品" class="headerlink" title="电子产品"></a>电子产品</h3><h4 id="iPhone-8"><a href="#iPhone-8" class="headerlink" title="iPhone 8"></a>iPhone 8</h4><p>把很喜欢的 iPhone SE 退役了，因为跑 iOS11 耗电快，性能不够。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3mzigtncj31ja17uaqe.jpg" alt></p><h4 id="SONY-黑卡-1"><a href="#SONY-黑卡-1" class="headerlink" title="SONY 黑卡 1"></a>SONY 黑卡 1</h4><p>为了方便写数码产品评测，入手了黑卡 1 代。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3n6gqyzaj30u00u0gqv.jpg" alt></p><h4 id="DS216j-DS218"><a href="#DS216j-DS218" class="headerlink" title="DS216j/DS218+"></a>DS216j/DS218+</h4><p>上半年用 DS216j，因为性能满足不了，年底换成了 DS218+. 关于 NAS 的使用，可以参考<a href="/blog/synology-ds216j-exp/">这篇文章</a>.</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3n2gyl48j31kw16o19e.jpg" alt></p><h4 id="Yamaha-P115-Yamaha-NP12"><a href="#Yamaha-P115-Yamaha-NP12" class="headerlink" title="Yamaha P115 / Yamaha NP12"></a>Yamaha P115 / Yamaha NP12</h4><p>因为要学习 Keyboard，入手了 Yamaha P115 电钢来入门。P115 是全配重的，手感很好，但是重量大，不便携。为了可以携带出去户外表演，于是又入了轻一半重量的 61 键的 NP12。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3mz45nepj31kw16oqew.jpg" alt></p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3mym8w5vj30u00u2481.jpg" alt></p><h4 id="Nintendo-Switch"><a href="#Nintendo-Switch" class="headerlink" title="Nintendo Switch"></a>Nintendo Switch</h4><p>买了 Switch, 圆了掌机梦，玩了《塞尔达传说》和《奥德赛》。因为便携，吃灰率要比 PS4 低。</p><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3n20mksej31kw16mu07.jpg" alt></p><h4 id="DJI-Spark"><a href="#DJI-Spark" class="headerlink" title="DJI Spark"></a>DJI Spark</h4><p><img src="//bstatic.djyde.com/assets/006tKfTcgy1fn3n6wgqt5j31d81d8ndh.jpg" alt></p><h2 id="新年计划"><a href="#新年计划" class="headerlink" title="新年计划"></a>新年计划</h2><p>2018 年的计划是多写写代码，多玩玩音乐，读更多书，换一间大些的房子，买一辆车。</p><p>有次和朋友聊天，她说，你知道自己想要做什么，又能把它做到，还能靠它养活自己。你千万不能变得世俗啊，如果你也变得世俗，我会觉得这个世界，真的就是那样了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h2&gt;&lt;p&gt;我的 2017 过得很平淡，可能是因为出来工作已经是第二年了。&lt;/p&gt;
&lt;p&gt;今年比较特别的是身边的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的地下刊物</title>
    <link href="/blog/my-underground-publication/"/>
    <id>/blog/my-underground-publication/</id>
    <published>2017-08-25T13:04:17.000Z</published>
    <updated>2019-05-15T02:07:37.051Z</updated>
    
    <content type="html"><![CDATA[<p>一个月前一位初中朋友 Bunny 发了一篇 <a href="https://mp.weixin.qq.com/s/tfzlzCEQJuIQDS-Djbg8CA" target="_blank" rel="noopener">《年少的文字》</a>，讲起了初中的我们搞地下刊物的事，让我想起了那段时间这本刊物的一些点滴。</p><p>这份刊物叫《新视觉》。当年要做这份刊物，是因为那段时间，我读了很多民国时期的文学作品，还读了李开复的那本《世界因你而不同》，使我开始对政治、教育有了不一样的看法。</p><p>当时的我认为文字只有背负了政治的责任，才能称得上文学。所以看不起很多「当代文学」。我对当代文学的定义是 —— 1990 年以后出现的文学。</p><p>班里一个女性朋友很喜欢郭敬明，我却对此嗤之以鼻。于是我给我朋友传教似地讲了很多诸如为什么我们需要关心政治、我们应该读些什么书、我们需要什么样的教育等等这样的话题。但是她不以为然，认为我越俎代疱。</p><p>我想，我应该做一份刊物，来传达我的理念。因为「不识字的上人的当，识字的的上印刷品的当」。</p><p>就这样，我拿了一沓我们学校标准的信签纸，开始做了起来。我把这份刊物叫做《新视觉》，是源于白话文运动时，陈独秀所创的《新青年》。我认为这份刊物的目标，是为了提倡新思想，以摘抄严肃文学作品的形式，启发班上的同学，应该从现在起，去寻找自己的目标，自己想要的是什么，未来想做的是什么。而不是把所有时间，都花在试卷和娱乐上。</p><p>为了传达这份理念，我在首期的《新视觉》的第一页，认真地誊写了 Robert Frost 那首诗 —— The Road Not Taken.</p><p>我现在已经记不清当时摘抄了哪些具体的文字了，只记得抄过王小波、李敖、韩寒、胡适等等。</p><p>这份全手写的刊物开始在班上互相传阅，并不是因为内容深刻，而是因为形式新鲜罢了。我为了这份刊物可以维持下去，「聘请」了上文提到的女同学作为编辑，也接受所有同学的来稿。</p><p>接受同学的来稿后，刊物渐渐成了班级的一部分，甚至每一期都会有人催我「出版」。当时的「出版」形式，则是收集来稿，用钉书机装钉成册。</p><p>同学的来稿很有意思，有人开始做起了小说连载。而我还是做一些摘抄，顺便构思一些虚构类的讽刺文章。同时 Bunny 开始把手写的刊物改革成了真正的印刷品——每周回家录入然后打印出来。</p><p>因为刊物带有媒体属性，班级上一些事件也会被刊登到里面去。例如校运会，我们做了一份校运会特刊，报道了校运会的情况、现场照片。</p><p>虽然刊物在班上火了，但我并不是太开心，因为这本刊物慢慢偏离了我的初衷。我向 Bunny 提出要做一本《新视觉》的子刊物，就叫做「16 度」(我们是 16 班)，把小说连载、读者来信这些内容都放到里面，《新视觉》只做严肃文学。</p><p>于是 Bunny 开始打造《16 度》，而我继续负责《新视觉》。发展到后来，《16 度》其实有很多地方和《最小说》变得很相似，是同学们饭后的话题、减缓考试压力的地方。很多人在上面连载小说。不生产的内容的，也会来留言，说自己对某篇文章的读后感。而这份带有意识形态的《新视觉》很快就没有再连续出版下去了。</p><p>以上是我对这份刊物仅剩的几乎所有回忆，手写的稿早就在初中一次搬课室的过程中丢失了。谁会想到这些东西未来会被这样津津乐道呢。这确实是一个遗憾。</p><p><img src="//bstatic.djyde.com/assets/006tNc79gy1fiw9q3a4rvj30hs07e753.jpg" alt></p><p><em>从手写改革到印刷的头几期</em></p><p><img src="//bstatic.djyde.com/assets/006tNc79gy1fiw9rbi9otj30hs0aqwfq.jpg" alt></p><p><em>校运会特刊的「发布会」</em></p><p><img src="//bstatic.djyde.com/assets/006tNc79gy1fiw9ryihc9j30hs0by0up.jpg" alt></p><p><em>校运会，「小编」们的一次合照</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个月前一位初中朋友 Bunny 发了一篇 &lt;a href=&quot;https://mp.weixin.qq.com/s/tfzlzCEQJuIQDS-Djbg8CA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《年少的文字》&lt;/a&gt;，讲起了初中的我们搞地下刊
      
    
    </summary>
    
    
  </entry>
  
</feed>
